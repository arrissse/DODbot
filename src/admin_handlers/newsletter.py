import asyncio
import logging
from datetime import datetime

import aiosqlite
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

from bot import bot, router
from src.database.admin import get_admin_by_username, get_admin_level
from src.database.base import db_manager
from src.database.users import get_all_users

logger = logging.getLogger(__name__)


class NewsletterStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Attributes:
        waiting_newsletter_text (State): –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.
        waiting_send_time (State): –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–∑–∂–µ).
        waiting_custom_time (State): –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    waiting_newsletter_text = State()
    waiting_send_time = State()
    waiting_custom_time = State()


async def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã newsletter –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.

    –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:
        - id: –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
        - message: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        - send_time: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É

    Raises:
        aiosqlite.Error: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        async with db_manager.get_connection() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS newsletter (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message TEXT NOT NULL,
                    send_time TEXT NOT NULL
                )
            """)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ newsletter —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    except aiosqlite.Error as err:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: %s", str(err))
        raise


async def add_newsletter(newsletter_text: str, send_time: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É newsletter —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏.

    Args:
        newsletter_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
        send_time (str): –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM'.
    """
    try:
        date = datetime.strptime(send_time, '%Y-%m-%d %H:%M')
        formatted_time = date.strftime('%Y-%m-%d %H:%M')
        async with db_manager.get_connection() as data_base:
            await data_base.execute(
                "INSERT INTO newsletter (message, send_time) VALUES (?, ?)",
                (newsletter_text, formatted_time)
            )
            await data_base.commit()
            logger.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ %s", formatted_time)
    except ValueError as err:
        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: %s", err)


async def newsletter_scheduler(this_bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –≤ —Ñ–æ–Ω–µ.

    –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —É–¥–∞–ª—è–µ—Ç –∏–∑ –±–∞–∑—ã.

    Args:
        this_bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        None
    """
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    while True:
        try:
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M')
            logger.debug("‚åõ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: %s", current_time)

            async with db_manager.get_connection() as conn:
                cursor = await conn.execute(
                    "SELECT id, message FROM newsletter WHERE send_time = ?",
                    (current_time,)
                )
                newsletters = await cursor.fetchall()

                if newsletters:
                    users = await get_all_users()
                    logger.info(
                        "üì® –ù–∞–π–¥–µ–Ω–æ %s —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", len(newsletters))

                    for newsletter in newsletters:
                        newsletter_id, message_text = newsletter
                        success = 0
                        errors = 0

                        if not users:
                            logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
                            return

                        for user in users:
                            try:
                                await this_bot.send_message(
                                    chat_id=int(user['id']),
                                    text=message_text
                                )
                                success += 1
                                await asyncio.sleep(0.1)
                            except Exception as err:
                                logger.error(
                                    "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s: %s",
                                    user.get('username', 'N/A'), str(err)
                                )
                                errors += 1

                        await conn.execute(
                            "DELETE FROM newsletter WHERE id = ?",
                            (newsletter_id,)
                        )
                        await conn.commit()
                        logger.info(
                            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: %s, –û—à–∏–±–æ–∫: %s", newsletter_id, success, errors)

            sleep_time = 60 - datetime.now().second
            await asyncio.sleep(sleep_time)

        except Exception as err:
            logger.error(
                "üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: %s", str(err), exc_info=True)
            await asyncio.sleep(60)


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def handle_newsletter(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É".
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç FSM –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    user = await get_admin_by_username(f"@{message.from_user.username}")
    level = await get_admin_level(user)
    if user and level == 0:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(NewsletterStates.waiting_newsletter_text)
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")


@router.message(NewsletterStates.waiting_newsletter_text, F.text)
async def process_newsletter_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–∑–∂–µ).

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.update_data(text=message.text)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöÄ –°–µ–π—á–∞—Å", callback_data="send_now"),
            InlineKeyboardButton(
                text="‚è≥ –ü–æ–∑–∂–µ", callback_data="schedule_later")
        ]
    ])

    await message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=markup)
    await state.set_state(NewsletterStates.waiting_send_time)


@router.callback_query(NewsletterStates.waiting_send_time, F.data.in_(["send_now", "schedule_later"]))
async def handle_send_option(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

    Args:
        callback (CallbackQuery): –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await callback.answer()
    data = await state.get_data()
    newsletter_text = data.get('text')

    if callback.data == "send_now":
        await send_newsletter(newsletter_text)
        await callback.message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
    else:
        await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM")
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")
        await state.set_state(NewsletterStates.waiting_custom_time)


async def send_newsletter(text: str):
    """
    –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    Args:
        text (str): –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.

    Raises:
        Exception: –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.
    """
    try:
        users = await get_all_users()
        success = 0
        errors = 0

        for user in users:

            try:
                chat_id = int(user['id'])
                await bot.send_message(chat_id=chat_id, text=text)
                success += 1
            except ValueError:
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", user['id'])
                errors += 1
                continue
            except Exception as err:
                logger.error(
                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s: %s", user.get('username', 'N/A'), str(err))
                errors += 1

        logger.info(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: %s | –û—à–∏–±–æ–∫: %s", success, errors)
    except Exception as err:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: %s", str(err))
        raise


@router.message(NewsletterStates.waiting_custom_time, F.text)
async def process_custom_time(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä–Ω—ã–π.

    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    data = await state.get_data()
    newsletter_text = data.get('text')
    send_time = message.text.strip()

    if not newsletter_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Ç–µ—Ä—è–Ω")
        await state.clear()
        return

    try:
        date = datetime.strptime(send_time, '%Y-%m-%d %H:%M')
        formatted_time = date.strftime('%Y-%m-%d %H:%M')

        async with db_manager.get_connection() as conn:
            await conn.execute(
                "INSERT INTO newsletter (message, send_time) VALUES (?, ?)",
                (newsletter_text, formatted_time)
            )
            await conn.commit()

        logger.info("–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ %s", formatted_time)
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {formatted_time}!")
    except ValueError as err:
        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: %s", err)
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM")
    except Exception as err:
        logger.critical("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π: %s", str(err))
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    finally:
        await state.clear()
