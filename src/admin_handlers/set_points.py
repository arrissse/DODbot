import logging

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import router
from constants import STATIONS
from src.database.admin import get_admin_by_username, get_admin_level
from src.database.users import (get_user_by_username, is_quest_started,
                                update_user_points, update_user_queststation)


class SetPointsStates(StatesGroup):
    """
    FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    waiting_username  ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
    waiting_station   ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏;
    waiting_points    ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤.
    """
    waiting_username = State()
    waiting_station = State()
    waiting_points = State()


@router.message(F.text == "–ö–≤–µ—Å—Ç. –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª—ã")
async def set_points(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.

    –®–∞–≥ 1: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è 0 –∏–ª–∏ 2.
    –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_username
    –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–∞–Ω–¥—ã.
        state (FSMContext): FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    admin = await get_admin_by_username(f"@{message.from_user.username}")
    level = await get_admin_level(f"@{message.from_user.username}")
    if not admin or level not in (0, 2):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username):")
    await state.set_state(SetPointsStates.waiting_username)


@router.message(SetPointsStates.waiting_username)
async def process_username(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –®–∞–≥ 2:
      - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
      - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ FSM –¥–∞–Ω–Ω—ã–µ –æ –Ω–∏–∫–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ,
      - –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
          ‚Ä¢ —É—Ä–æ–≤–µ–Ω—å 0: –≤—ã–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –∏
            –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ waiting_station;
          ‚Ä¢ —É—Ä–æ–≤–µ–Ω—å 2: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–≤–æ–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@ivan").
        state (FSMContext): FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    username = message.text.strip().lstrip('@')
    user = await get_user_by_username(username)

    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return

    admin = await get_admin_by_username(f"@{message.from_user.username}")

    await state.update_data(username=username, admin=admin)
    level = await get_admin_level(f"@{message.from_user.username}")
    if level == 0:
        builder = InlineKeyboardBuilder()
        for name, number in STATIONS.items():
            builder.button(text=name, callback_data=f"select_station:{number}")
        builder.adjust(2)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏:", reply_markup=builder.as_markup())
        await state.set_state(SetPointsStates.waiting_station)
    elif level == 2:
        station_num = await get_admin_level(f'{username}')
        if user.get(f'quest{station_num}_points', 0) != 0:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–∞–ª–ª—ã.")
            await state.clear()
            return
        await process_points_selection(message, username, admin['questnum'], state)


@router.callback_query(F.data.startswith("select_station:"), SetPointsStates.waiting_station)
async def process_station_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ InlineKeyboard.

    –®–∞–≥ 3:
      - —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ callback_data,
      - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–∞–ª–ª—ã –∑–∞ —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã,
      - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç station_num –≤ FSM,
      - –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤.

    Args:
        callback (CallbackQuery): callback —Å –¥–∞–Ω–Ω—ã–º–∏ "select_station:<–Ω–æ–º–µ—Ä>".
        state (FSMContext): FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    await callback.answer()
    data = await state.get_data()
    username = data['username']
    station_num = int(callback.data.split(":")[1])

    user = await get_user_by_username(username)
    if user.get(f'quest{station_num}_points', 0) != 0:
        await callback.message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–∞–ª–ª—ã.")
        await state.clear()
        return
    station_name = [name for name,
                    num in STATIONS.items() if num == station_num][0]
    await state.update_data(station_num=station_num)
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {station_name}")
    await process_points_selection(callback.message, username, station_num, state)


async def process_points_selection(message: Message, username: str, station_num: int, state: FSMContext):
    """
    –û–±—â–∏–π —à–∞–≥: –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (1 –∏–ª–∏ 2).

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–≤–µ—Å—Ç. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–± —ç—Ç–æ–º.
    –ï—Å–ª–∏ –¥–∞ ‚Äî –≤—ã–≤–æ–¥–∏—Ç InlineKeyboard —Å –∫–Ω–æ–ø–∫–∞–º–∏ "1Ô∏è‚É£", "2Ô∏è‚É£" –∏ "üîô –ù–∞–∑–∞–¥",
    –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_points.

    Args:
        message (Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–ª–∏–±–æ Message, –ª–∏–±–æ .message –∏–∑ CallbackQuery).
        username (str): –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ "@").
        station_num (int): –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.
        state (FSMContext): FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    if not await is_quest_started(username):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∫–≤–µ—Å—Ç.")
        return

    await state.update_data(station_num=station_num, username=username)

    builder = InlineKeyboardBuilder()
    builder.button(text="1Ô∏è‚É£", callback_data="points:1")
    builder.button(text="2Ô∏è‚É£", callback_data="points:2")
    builder.button(
        text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_stations:{username}")
    builder.adjust(2)

    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è @{username}:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SetPointsStates.waiting_points)


@router.callback_query(F.data.startswith("back_to_stations:"), SetPointsStates.waiting_points)
async def back_to_stations(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∞–ª–ª–æ–≤.

    –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∫ —ç—Ç–∞–ø—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ (waiting_station).

    Args:
        callback (CallbackQuery): callback —Å –¥–∞–Ω–Ω—ã–º–∏ "back_to_stations:<username>".
        state (FSMContext): FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        await callback.message.delete()

        username = callback.data.split(":")[1]
        await state.update_data(username=username)

        builder = InlineKeyboardBuilder()
        for name, number in STATIONS.items():
            builder.button(
                text=name,
                callback_data=f"select_station:{number}"
            )
        builder.adjust(2)

        await callback.message.answer(
            text=f"üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è @{username}",
            reply_markup=builder.as_markup()
        )

        await state.set_state(SetPointsStates.waiting_station)

    except Exception as err:
        logging.error("–û—à–∏–±–∫–∞ –≤ back_to_stations: %s", err)
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@router.callback_query(F.data.startswith("points:"), SetPointsStates.waiting_points)
async def process_points_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤.

    –®–∞–≥ 4:
      - —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∏–∑ callback_data,
      - –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î,
      - –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM.

    Args:
        callback (CallbackQuery): callback —Å –¥–∞–Ω–Ω—ã–º–∏ "points:<1 –∏–ª–∏ 2>".
        state (FSMContext): FSM-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    await callback.answer()
    points = int(callback.data.split(":")[1])
    data = await state.get_data()

    try:
        await update_user_points(data['username'], data['station_num'], points)
        await update_user_queststation(data['username'])
    except Exception as err:
        await callback.message.answer(err)

    await callback.message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {data['username']} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤!"
    )
    await state.clear()
