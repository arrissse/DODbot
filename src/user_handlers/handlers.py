import logging

from aiogram import F, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import router
from constants import QUEST_TEXT, SCHOOLS, STATION_PLACE, STATIONS
from src.database.admin import get_admin_level, get_all_admins
from src.database.users import (add_user, check_points, check_st_points,
                                get_all_users, is_quest_started, start_quest)
from src.keyboard import (activity_keyboard, admin_keyboard,
                          continue_quest_keyboard, main_keyboard,
                          mipt_admin_keyboard, pro_admin_keyboard,
                          quest_keyboard, quest_started_keyboard)

# --------------------------------------------------

# /start command and running bot via QR-code

# --------------------------------------------------


@router.message(Command("start"))
async def start_handler(message: types.Message):
    """
    Handle the /start command: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∞
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é. –ü—Ä–∏—Ö–æ–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start ‚Äî –∫–æ–¥ QR.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
    """
    try:
        user = message.from_user
        user_list = await get_all_users()
        if user not in user_list:
            await add_user(message.chat.id, user.username)
        current_username = f"@{user.username}"
        admins = await get_all_admins()
        admin_usernames = [admin[0] for admin in admins]

        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", current_username)

        keyboard = main_keyboard()

        if current_username in admin_usernames:

            admin_level = await get_admin_level(current_username)
            print(f"–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω—Å—Ç–≤–∞ –¥–ª—è {current_username}: {admin_level}")
            if admin_level == 0:
                keyboard = pro_admin_keyboard()
            elif admin_level == 1:
                keyboard = admin_keyboard()
            elif admin_level == 2:
                keyboard = mipt_admin_keyboard()
            await message.answer("üîë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=keyboard)
        else:
            await add_user(message.chat.id, user.username)
            await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        parts = message.text.split()
        if len(parts) > 1:
            param = parts[1]

            try:
                if int(param[-2:]) >= 10:
                    name = param[-2:]
                else:
                    name = param[-1]
            except ValueError:
                name = param[-1]

            photo_url = f"img/places/{name}.png"
            await do_action(message, photo_url)
    except Exception as err:
        await message.answer(str(err))


async def do_action(message, photo_url):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ç–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É URL.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º.
        photo_url (str): –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ.
    """
    try:
        photo = FSInputFile(photo_url)
        await message.answer_photo(photo, caption="–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
    except Exception as err:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(err)}")


# --------------------------------------------------

# Lecture schedule

# --------------------------------------------------
@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π")
async def send_schedule_photo(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ª–µ–∫—Ü–∏–π.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    try:
        photo = FSInputFile("img/schedule.png")
        await message.answer_photo(photo, caption="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π:")
    except Exception as err:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(err)}")


# --------------------------------------------------

# Quest

# --------------------------------------------------
@router.message(F.text == "üéØ –ö–≤–µ—Å—Ç")
async def quest_handler(message):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∫–≤–µ—Å—Ç: –≤—ã–¥–∞—ë—Ç –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞—é—â–µ–µ –∫–≤–µ—Å—Ç.
    """
    if await is_quest_started(message.from_user.username):
        keyboard = quest_started_keyboard()
    else:
        keyboard = quest_keyboard()

    await message.answer(QUEST_TEXT, reply_markup=keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.message(F.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")
async def start_quest_handler(message: types.Message):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏—é.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´–ù–∞—á–∞—Ç—å¬ª.
    """
    await start_quest(message.from_user.username)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:", reply_markup=continue_quest_keyboard())


@router.message(F.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_quest_handler(message: types.Message):
    """
    –ü–æ—è–≤–ª—è–µ—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –Ω–∞—á–∞–ª –∫–≤–µ—Å—Ç

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:", reply_markup=continue_quest_keyboard())


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π ¬´–ù–∞–∑–∞–¥¬ª.
    """
    await message.answer("–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_keyboard())


async def send_quest_points(message: types.Message, username: str, station: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â–µ–µ –∏ –ø–æ‚Äê—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º.
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        station (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏.
    """
    points = await check_points(username)
    st_points = await check_st_points(username, station)
    await message.answer(f"–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {points}\n–ë–∞–ª–ª—ã –∑–∞ —Å—Ç–∞–Ω—Ü–∏—é: {st_points}",
                         reply_markup=quest_started_keyboard())


@router.message(F.text.in_(STATIONS))
async def handle_station(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ—ë —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω—Ü–∏–∏.
    """
    try:
        station_number = STATIONS[message.text]
        st_place = STATION_PLACE[station_number - 1]
        username = message.from_user.username

        builder = InlineKeyboardBuilder()
        builder.button(text="–ö–æ–¥ –¥–ª—è —É—á–∞—Å—Ç–∏—è",
                       callback_data=f"code:{username}")
        builder.button(
            text="–ë–∞–ª–ª—ã", callback_data=f"pts:{username}:{station_number}")

        await message.answer(f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ {message.text}: {st_place}",
                             reply_markup=builder.as_markup())
    except Exception as err:
        await message.answer(str(err))


@router.callback_query(F.data.startswith("code:"))
async def send_code(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–æ–±—â–∏—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏
    –¥–ª—è –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –æ—Ç InlineKeyboard.
    """
    _, username = callback.data.split(":")
    await callback.message.answer(f"–°–æ–æ–±—â–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –≤–∞—à –∫–æ–¥: {username}")
    await callback.answer()


@router.callback_query(F.data.startswith("pts:"))
async def send_pts(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –±–∞–ª–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É.

    Args:
        callback (types.CallbackQuery): –û–±—ä–µ–∫—Ç callback –æ—Ç InlineKeyboard.
    """
    _, username, station_number = callback.data.split(":")
    await send_quest_points(callback.message, username, station_number)
    await callback.answer()


# --------------------------------------------------

# Map

# --------------------------------------------------
@router.message(F.text == "üó∫ –ö–∞—Ä—Ç–∞")
async def send_map_photo(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–∞—Ä—Ç—ã.
    """
    try:
        photo = FSInputFile("img/map.png")
        await message.answer_photo(photo, caption="üó∫ –ö–∞—Ä—Ç–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:")
    except Exception as err:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(err)}")


# --------------------------------------------------

# Stand locations
# --------------------------------------------------
@router.message(F.text == "üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤")
async def send_stands_photo(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Å—Ç–µ–Ω–¥–æ–≤.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–µ–Ω–¥–æ–≤.
    """
    try:
        photo = FSInputFile("img/stand.png")
        await message.answer_photo(photo, caption="üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤:")
    except Exception as err:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(err)}")


# --------------------------------------------------

# SCHOOLS activities

# --------------------------------------------------
@router.message(F.text == "üß© –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –§–®")
async def school_handler(message: types.Message):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –§–∏–∑—Ç–µ—Ö-—à–∫–æ–ª—É, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä–æ–π
    –æ–Ω —Ö–æ—á–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –§–®:", reply_markup=activity_keyboard())


@router.message(F.text.in_(SCHOOLS))
async def handle_activity(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∫–æ–ª—ã.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —à–∫–æ–ª—ã.
    """
    try:
        school_number = SCHOOLS[message.text]
        photo = FSInputFile(f"img/activities/{school_number}.png")
        await message.answer_photo(photo)
    except Exception as err:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(err)}")
