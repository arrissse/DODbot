from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboard import main_keyboard
from users import update_quize_points, is_finished_quiz, check_quiz_points
from datetime import datetime

def is_within_range(current_time_str, target_time_str, delta_minutes=10):
    current_dt = datetime.strptime(current_time_str, "%H:%M")
    target_dt = datetime.strptime(target_time_str, "%H:%M")
    diff = (current_dt - target_dt).total_seconds() / 60.0
    if diff < 0:
        return False
    return diff <= delta_minutes

quiz_schedule = {
    "11:00": ("–ö–≤–∏–∑ 1: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ê—É–¥–∏—Ç–æ—Ä–∏—è 101", "quiz1"),
    "12:00": ("–ö–≤–∏–∑ 2: –ò—Å—Ç–æ—Ä–∏—è", "–ê—É–¥–∏—Ç–æ—Ä–∏—è 102", "quiz2"),
    "13:00": ("–ö–≤–∏–∑ 3: –ù–∞—É–∫–∞", "–ê—É–¥–∏—Ç–æ—Ä–∏—è 103", "quiz3"),
    "14:00": ("–ö–≤–∏–∑ 4: –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ê—É–¥–∏—Ç–æ—Ä–∏—è 104", "quiz4"),
    "15:00": ("–ö–≤–∏–∑ 5: –°–ø–æ—Ä—Ç", "–ê—É–¥–∏—Ç–æ—Ä–∏—è 105", "quiz5")
}

@bot.message_handler(func=lambda message: message.text == "üéì –ö–≤–∏–∑—ã")
def send_quiz(m):
    try:
        current_time = datetime.now().strftime("%H:%M")
        selected_quiz = None

        for quiz_time, info in quiz_schedule.items():
            if is_within_range(current_time, quiz_time, delta_minutes=10):
                selected_quiz = (quiz_time, info)
                break
        if selected_quiz:
            quiz_time, (quiz_name, location, quiz_function_name) = selected_quiz
            bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")
        else:
            for time, info in quiz_schedule.items():
                upcoming = None
                if time > current_time:
                    upcoming = [time, info]
                    break
            if upcoming:
                n_quiz_time, (n_quiz_name, n_location, n_quiz_function_name) = upcoming
            else:
                next_quiz_time = min(quiz_schedule.keys())
            bot.send_message(m.chat.id, f"–ë–ª–∏–∂–∞–π—à–∏–π –∫–≤–∏–∑ –Ω–∞—á–Ω–µ—Ç—Å—è –≤ {n_quiz_time} –≤ {n_location}")
            return
    except Exception as e:
        bot.send_message(m.chat.id, e)

    def process_message(message):
        message_text = message.text.lower().strip()
        words = ["—Å–æ—Å–∏—Å–∫–∞", "–∫–æ–ª–±–∞—Å–∞", "1", "2", "3"]
        if message_text in words:
            if selected_quiz:
                _, (_, _, quiz_function_name) = selected_quiz
                quiz_func = globals().get(quiz_function_name)
                if quiz_func:
                    quiz_func(message)
                else:
                    bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è –∫–≤–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                bot.send_message(message.chat.id, "–ù–µ—Ç –∫–≤–∏–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.")

    bot.register_next_step_handler(m, process_message)

correct_answers = {
    1: "2",
    2: "3",
    3: "1"
}


# –ö–≤–∏–∑ 1: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
def quiz1(message):
    user = message.from_user.username
    print(user)
    if is_finished_quiz(user, 1):
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –∫–≤–∏–∑–µ.")
        return
    bot.send_message(message.chat.id, "–ö–≤–∏–∑ 1: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –§—Ä–∞–Ω—Ü–∏–∏?")

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("1) –ë–µ—Ä–ª–∏–Ω", callback_data=f"select_station:1:{user}"),
        InlineKeyboardButton("2) –ü–∞—Ä–∏–∂", callback_data=f"select_station:2:{user}"),
        InlineKeyboardButton("3) –†–∏–º", callback_data=f"select_station:3:{user}"),
        InlineKeyboardButton("4) –õ–æ–Ω–¥–æ–Ω", callback_data=f"select_station:4:{user}")
    )

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_station:"))
def check_answer_1(call):
    bot.answer_callback_query(call.id)

    parts = call.data.split(":")
    ans = parts[1]
    user = parts[2]
    print(ans, " ", user)
    chat_id = call.message.chat.id
    print(f"{user}, {ans}") 
    if int(ans) == int(correct_answers[1]):
        update_quize_points(user, 1)

    bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º?")
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
            InlineKeyboardButton("1) –ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", callback_data=f"select_ocean:1:{user}"),
            InlineKeyboardButton("2) –ò–Ω–¥–∏–π—Å–∫–∏–π", callback_data=f"select_ocean:2:{user}"),
            InlineKeyboardButton("3) –¢–∏—Ö–∏–π", callback_data=f"select_ocean:3:{user}"),
            InlineKeyboardButton("4) –Æ–∂–Ω—ã–π", callback_data=f"select_ocean:4:{user}")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)     

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_ocean:"))
def check_answer_2(call):
    bot.answer_callback_query(call.id)

    parts = call.data.split(":")
    ans = parts[1]
    user = parts[2]
    chat_id = call.message.chat.id
    print(f"{ans}") 
    if int(ans) == int(correct_answers[2]):
        update_quize_points(user, 1)

    bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å 3: –°–æ—Å–∞–ª?")
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
            InlineKeyboardButton("1) –î–∞", callback_data=f"select_sos:1:{user}"),
            InlineKeyboardButton("2) –ù–µ—Ç", callback_data=f"select_sos:2:{user}"),
            InlineKeyboardButton("3) –ù–∞–≤–µ—Ä–Ω–æ–µ", callback_data=f"select_sos:3:{user}"),
            InlineKeyboardButton("4) –ù–µ —Ö–æ—á—É –æ—Ç–≤–µ—á–∞—Ç—å", callback_data=f"select_sos:4:{user}")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)  

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_sos:"))
def check_answer_3(call):
    bot.answer_callback_query(call.id)

    parts = call.data.split(":")
    ans = parts[1]
    user = parts[2]
    chat_id = call.message.chat.id
    print(f"{ans}") 
    if int(ans) == int(correct_answers[3]):
        update_quize_points(user, 1)

    bot.send_message(chat_id, f"–ö–≤–∏–∑ –ø—Ä–æ–π–¥–µ–Ω. –°—É–º–º–∞ –±–∞–ª–ª–æ–≤: {check_quiz_points(user)}", reply_markup=main_keyboard())

correct_answers_2 = {
    1: "1",
    2: "3",
    3: "1"
}


# –ö–≤–∏–∑ 2: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
def quiz2(message):
    user = message.from_user.username
    print(user)
    if is_finished_quiz(user, 2):
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –∫–≤–∏–∑–µ.")
        return

    bot.send_message(message.chat.id, "–ö–≤–∏–∑ 2: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1: –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5 * 6?")

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("1) 30", callback_data=f"select_num:1:{user}"),
        InlineKeyboardButton("2) 35", callback_data=f"select_num:2:{user}"),
        InlineKeyboardButton("3) 40", callback_data=f"select_num:3:{user}"),
        InlineKeyboardButton("4) 25", callback_data=f"select_num:4:{user}")
    )

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_num:"))
def check_answer_4(call):
    bot.answer_callback_query(call.id)

    parts = call.data.split(":")
    ans = parts[1]
    user = parts[2]
    chat_id = call.message.chat.id
    print(f"{ans}") 
    if ans == correct_answers_2[1]:
        update_quize_points(user, 2)

    bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ 144?")
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
            InlineKeyboardButton("1) 10", callback_data=f"select_sqrt:1:{user}"),
            InlineKeyboardButton("2) 11", callback_data=f"select_sqrt:2:{user}"),
            InlineKeyboardButton("3) 12", callback_data=f"select_sqrt:3:{user}"),
            InlineKeyboardButton("4) 13", callback_data=f"select_sqrt:4:{user}")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_sqrt:"))
def check_answer_5(call):
    bot.answer_callback_query(call.id)

    parts = call.data.split(":")
    ans = parts[1]
    user = parts[2]
    chat_id = call.message.chat.id
    print(f"{ans}") 
    if ans == correct_answers_2[2]:
        update_quize_points(user, 2)

    bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å 3: –ß–µ–º—É —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ü–∏ (œÄ)?")
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
            InlineKeyboardButton("1) 3.1415", callback_data=f"select_pi:1:{user}"),
            InlineKeyboardButton("2) 3.15", callback_data=f"select_pi:2:{user}"),
            InlineKeyboardButton("3) 2.718", callback_data=f"select_pi:3:{user}"),
            InlineKeyboardButton("4) 3.141", callback_data=f"select_pi:4:{user}")
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_pi:"))
def check_answer_6(call):
    bot.answer_callback_query(call.id)

    parts = call.data.split(":")
    ans = parts[1]
    user = parts[2]
    chat_id = call.message.chat.id
    print(f"{ans}") 
    if ans == correct_answers_2[3]:
        update_quize_points(user, 2)

    bot.send_message(chat_id, f"–ö–≤–∏–∑ –ø—Ä–æ–π–¥–µ–Ω. –°—É–º–º–∞ –±–∞–ª–ª–æ–≤: {check_quiz_points(user)}", reply_markup=main_keyboard())

# –ö–≤–∏–∑ 3: –ö–∏–Ω–æ
def quiz3(message):
    bot.send_message(message.chat.id, "–ö–≤–∏–∑ 3: –ö–∏–Ω–æ")
    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ñ–∏–ª—å–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ –∏–º–µ–Ω–∏ –ì–∞–Ω–¥–∏ —Å–ø–∞—Å–∞–µ—Ç –º–∏—Ä?")
    bot.send_message(message.chat.id, "–ê) –ì–ª–∞–¥–∏–∞—Ç–æ—Ä\n–ë) –ú—Å—Ç–∏—Ç–µ–ª–∏\n–í) –¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä\n–ì) –ò–Ω–¥–∏–π—Å–∫–∏–π —Ñ–∏–ª—å–º '–ì–∞–Ω–¥–∏'")
    bot.register_next_step_handler(message, check_answer_7)

def check_answer_7(message):
    if message.text.lower() == "–≥":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ì) –ò–Ω–¥–∏–π—Å–∫–∏–π —Ñ–∏–ª—å–º '–ì–∞–Ω–¥–∏'")

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ–ª—É—á–∏–ª –û—Å–∫–∞—Ä –∑–∞ –ª—É—á—à–∏–π —Ñ–∏–ª—å–º –≤ 1994 –≥–æ–¥—É?")
    bot.send_message(message.chat.id, "–ê) –§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø\n–ë) –ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞\n–í) –ü–∞—Ä–∫ –Æ—Ä—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n–ì) –õ–µ–≥–µ–Ω–¥–∞ –æ –¢–∞—Ä–∑–∞–Ω–µ")
    bot.register_next_step_handler(message, check_answer_8)

def check_answer_8(message):
    if message.text.lower() == "–∞":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê) –§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø")

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 3: –ö–∞–∫–∞—è –∞–∫—Ç—Ä–∏—Å–∞ —Å—ã–≥—Ä–∞–ª–∞ —Ä–æ–ª—å –î–∂—É–ª—å–µ—Ç—Ç—ã –≤ —Ñ–∏–ª—å–º–µ '–†–æ–º–µ–æ –∏ –î–∂—É–ª—å–µ—Ç—Ç–∞' (1996)?")
    bot.send_message(message.chat.id, "–ê) –ú–µ–≥–∞–Ω –§–æ–∫—Å\n–ë) –°–∫–∞—Ä–ª–µ—Ç—Ç –ô–æ—Ö–∞–Ω—Å—Å–æ–Ω\n–í) –ö–ª—ç—Ä –î–µ–π–Ω—Å\n–ì) –î–∂–µ–Ω–Ω–∏—Ñ–µ—Ä –õ–æ—É—Ä–µ–Ω—Å")
    bot.register_next_step_handler(message, check_answer_9)

def check_answer_9(message):
    if message.text.lower() == "–≤":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –í) –ö–ª—ç—Ä –î–µ–π–Ω—Å")

# –ö–≤–∏–∑ 4: –ú—É–∑—ã–∫–∞
def quiz4(message):
    bot.send_message(message.chat.id, "–ö–≤–∏–∑ 4: –ú—É–∑—ã–∫–∞")
    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1: –ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –ø–µ—Å–Ω–∏ 'Bohemian Rhapsody'?")
    bot.send_message(message.chat.id, "–ê) –≠–ª—Ç–æ–Ω –î–∂–æ–Ω\n–ë) –§—Ä–µ–¥–¥–∏ –ú–µ—Ä–∫—å—é—Ä–∏\n–í) –õ–µ–¥ –ó–µ–ø–ø–µ–ª–∏–Ω\n–ì) –ü–æ–ª –ú–∞–∫–∫–∞—Ä—Ç–Ω–∏")
    bot.register_next_step_handler(message, check_answer_10)

def check_answer_10(message):
    if message.text.lower() == "–±":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ë) –§—Ä–µ–¥–¥–∏ –ú–µ—Ä–∫—å—é—Ä–∏")

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–≥—Ä–∞–µ—Ç –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö –≥—Ä—É–ø–ø—ã Metallica?")
    bot.send_message(message.chat.id, "–ê) –ì–∏—Ç–∞—Ä–∞\n–ë) –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ\n–í) –¢—Ä–æ–º–±–æ–Ω\n–ì) –£–¥–∞—Ä–Ω—ã–µ")
    bot.register_next_step_handler(message, check_answer_11)

def check_answer_11(message):
    if message.text.lower() == "–∞":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê) –ì–∏—Ç–∞—Ä–∞")

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 3: –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ–±—é—Ç–Ω—ã–π –∞–ª—å–±–æ–º –≥—Ä—É–ø–ø—ã The Beatles?")
    bot.send_message(message.chat.id, "–ê) Abbey Road\n–ë) Let It Be\n–í) Please Please Me\n–ì) Revolver")
    bot.register_next_step_handler(message, check_answer_12)

def check_answer_12(message):
    if message.text.lower() == "–≤":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –í) Please Please Me")

# –ö–≤–∏–∑ 5: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
def quiz5(message):
    bot.send_message(message.chat.id, "–ö–≤–∏–∑ 5: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1: –ß—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π?")
    bot.send_message(message.chat.id, "–ê) Windows\n–ë) Google\n–í) Samsung\n–ì) Mozilla")
    bot.register_next_step_handler(message, check_answer_13)

def check_answer_13(message):
    if message.text.lower() == "–∞":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê) Windows")

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å?")
    bot.send_message(message.chat.id, "–ê) Twitter\n–ë) Instagram\n–í) Facebook\n–ì) LinkedIn")
    bot.register_next_step_handler(message, check_answer_14)

def check_answer_14(message):
    if message.text.lower() == "–≤":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –í) Facebook")

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 3: –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤?")
    bot.send_message(message.chat.id, "–ê) Python\n–ë) Ruby\n–í) Java\n–ì) JavaScript")
    bot.register_next_step_handler(message, check_answer_15)

def check_answer_15(message):
    if message.text.lower() == "–∞":
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ê) Python")