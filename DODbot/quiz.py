from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from users import update_quize_points, is_finished_quiz, check_quiz_points
from datetime import datetime, time as dt_time
import random
import logging
from database import db_manager
from keyboard import main_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
LETTERS = ["–ê", "–ë", "–í", "–ì"]
CODE_WORDS = {
    1: "—Å–æ—Å–∏—Å–∫–∞",
    2: "–∫–æ–ª–±–∞—Å–∞",
    3: "1",
    4: "2",
    5: "3"
}


def create_quiz_table():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–ª—è –∫–≤–∏–∑–æ–≤"""
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            cursor.executescript("""
                CREATE TABLE IF NOT EXISTS quiz_schedule (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    quiz_name TEXT NOT NULL,
                    start_time TEXT CHECK(length(start_time) = 5 AND start_time GLOB '[0-9][0-9]:[0-9][0-9]'),
                    location TEXT NOT NULL,
                    is_started INTEGER DEFAULT 0
                );

                CREATE TABLE IF NOT EXISTS questions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    quiz_id INTEGER NOT NULL,
                    question_number INTEGER NOT NULL,
                    text TEXT DEFAULT '–í–æ–ø—Ä–æ—Å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞',
                    UNIQUE(quiz_id, question_number),
                    FOREIGN KEY (quiz_id) REFERENCES quiz_schedule(id) ON DELETE CASCADE
                );

                CREATE TABLE IF NOT EXISTS answers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question_id INTEGER NOT NULL,
                    answer_text TEXT NOT NULL,
                    is_correct INTEGER DEFAULT 0 CHECK(is_correct IN (0, 1)),
                    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
                );
            """)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("""
                INSERT OR IGNORE INTO quiz_schedule (quiz_name, start_time, location) VALUES
                    ("–ö–≤–∏–∑ 1", "11:00", "113 –ì–ö"),
                    ("–ö–≤–∏–∑ 2", "12:00", "4.16 –¶–∏—Ñ—Ä–∞"),
                    ("–ö–≤–∏–∑ 3", "13:00", "423 –ì–ö"),
                    ("–ö–≤–∏–∑ 4", "14:00", "4.6 –ê—Ä–∫—Ç–∏–∫–∞"),
                    ("–ö–≤–∏–∑ 5", "15:00", "305 –õ–ö");
            """)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
            cursor.execute("SELECT id FROM quiz_schedule")
            for quiz_id, in cursor.fetchall():
                generate_quiz_questions(conn, quiz_id)

            
            logger.info("–¢–∞–±–ª–∏—Ü—ã –∫–≤–∏–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–≤–∏–∑–æ–≤: {e}")
        raise


def generate_quiz_questions(conn, quiz_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞"""
    try:
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ 25 –≤–æ–ø—Ä–æ—Å–æ–≤
        for q_num in range(1, 26):
            cursor.execute("""
                INSERT OR IGNORE INTO questions (quiz_id, question_number, text)
                VALUES (?, ?, ?)
            """, (quiz_id, q_num, f"–í–æ–ø—Ä–æ—Å {q_num} –¥–ª—è –∫–≤–∏–∑–∞ {quiz_id}"))

            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            cursor.execute("""
                SELECT id FROM questions
                WHERE quiz_id = ? AND question_number = ?
            """, (quiz_id, q_num))

            if question_row := cursor.fetchone():
                question_id = question_row[0]
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                cursor.execute(
                    "DELETE FROM answers WHERE question_id = ?", (question_id,))

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                correct_answer = random.randint(1, 4)
                for ans_num in range(1, 5):
                    cursor.execute("""
                        INSERT INTO answers (question_id, answer_text, is_correct)
                        VALUES (?, ?, ?)
                    """, (question_id, f"–í–∞—Ä–∏–∞–Ω—Ç {ans_num}", 1 if ans_num == correct_answer else 0))

        logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–≤–∏–∑–∞ {quiz_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        raise


def update_quiz_time(quiz_id: int, new_time: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∫–≤–∏–∑–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(new_time, "%H:%M")

        with db_manager.get_connection() as conn:
            conn.execute(
                "UPDATE quiz_schedule SET start_time = ? WHERE id = ?",
                (new_time, quiz_id))
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∫–≤–∏–∑–∞ {quiz_id} –Ω–∞ {new_time}")

    except ValueError:
         logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {new_time}")
         raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        raise


def is_within_range(current_time_str: str, target_time_str: str, delta_minutes=10) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω"""
    try:
        current = datetime.strptime(current_time_str, "%H:%M").time()
        target = datetime.strptime(target_time_str, "%H:%M").time()

        current_sec = current.hour * 3600 + current.minute * 60
        target_sec = target.hour * 3600 + target.minute * 60

        return 0 <= (current_sec - target_sec) <= delta_minutes * 60

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False


@bot.message_handler(func=lambda m: m.text == "üéì –ö–≤–∏–∑—ã")
def handle_quiz_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ö–≤–∏–∑—ã'"""
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, quiz_name, start_time, location 
                FROM quiz_schedule 
                ORDER BY start_time ASC
            """)

            current_time = datetime.now().strftime("%H:%M")
            quizzes = cursor.fetchall()

            # –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–∏–∑–∞
            active_quiz = next(
                (q for q in quizzes if is_within_range(current_time, q[2])),
                None
            )

            if active_quiz:
                quiz_id, name, time, location = active_quiz
                bot.send_message(
                    message.chat.id,
                    f"üïí –°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç {name} ({time})!\n"
                    f"üìç –ú–µ—Å—Ç–æ: {location}\n"
                    "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:"
                )
                bot.register_next_step_handler(
                    message,
                    lambda m: process_quiz_start(m, quiz_id)
                )
            else:
                # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–≤–∏–∑–∞
                upcoming = next(
                    (q for q in quizzes if q[2] > current_time),
                    None
                )

                if upcoming:
                    msg = (f"‚è≥ –ë–ª–∏–∂–∞–π—à–∏–π –∫–≤–∏–∑:\n"
                           f"üìå {upcoming[1]}\n"
                           f"üïí {upcoming[2]}\n"
                           f"üìç {upcoming[3]}")
                else:
                    msg = "üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∫–≤–∏–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç."

                bot.send_message(message.chat.id, msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∫–≤–∏–∑–∞: {e}")
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def process_quiz_start(message, quiz_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    try:
        user_input = message.text.strip().lower()
        expected_word = CODE_WORDS.get(quiz_id)

        if user_input == expected_word:
            start_quiz(message, quiz_id)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∫–≤–∏–∑–∞: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞")


def start_quiz(message, quiz_id: int):
    """–ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = message.from_user.username
        if not user:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username")

        if is_finished_quiz(user, quiz_id):
            bot.send_message(message.chat.id, "‚úã –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑")
            return

        with db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id FROM questions 
                WHERE quiz_id = ? 
                ORDER BY question_number ASC 
                LIMIT 1
            """, (quiz_id,))

            if first_question := cursor.fetchone():
                send_question(message.chat.id, user,
                              first_question[0], quiz_id)
            else:
                bot.send_message(
                    message.chat.id, "‚ö†Ô∏è –í —ç—Ç–æ–º –∫–≤–∏–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞")


def send_question(chat_id: int, user: str, question_id: int, quiz_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        with db_manager.get_connection() as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            cursor.execute("""
                SELECT id, answer_text 
                FROM answers 
                WHERE question_id = ? 
                ORDER BY id ASC
            """, (question_id,))
            answers = cursor.fetchall()

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            markup = InlineKeyboardMarkup(row_width=2)
            for idx, (ans_id, text) in enumerate(answers):
                markup.add(InlineKeyboardButton(
                    text=f"{LETTERS[idx]} {text}",
                    callback_data=f"answer_{question_id}_{ans_id}_{user}_{quiz_id}"
                ))

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
            bot.send_message(
                chat_id,
                f"‚ùì –í–æ–ø—Ä–æ—Å #{question_id}",
                reply_markup=markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def handle_answer(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        bot.answer_callback_query(call.id)
        parts = call.data.split('_')
        if len(parts) != 5:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")

        _, question_id, answer_id, user, quiz_id = parts
        question_id = int(question_id)
        answer_id = int(answer_id)
        quiz_id = int(quiz_id)

        with db_manager.get_connection() as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            cursor.execute("""
                SELECT is_correct 
                FROM answers 
                WHERE id = ?
            """, (answer_id,))

            if (result := cursor.fetchone()) and result[0] == 1:
                update_quize_points(user, quiz_id, 1)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")

            # –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            cursor.execute("""
                SELECT id FROM questions 
                WHERE quiz_id = ? AND id > ? 
                ORDER BY id ASC 
                LIMIT 1
            """, (quiz_id, question_id))

            if next_question := cursor.fetchone():
                send_question(call.message.chat.id, user,
                              next_question[0], quiz_id)
            else:
                score = check_quiz_points(user, quiz_id)
                bot.send_message(
                    call.message.chat.id,
                    f"üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                    f"üéâ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –±–∞–ª–ª–æ–≤",
                    reply_markup=main_keyboard()
                )
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–∏–∑ {quiz_id} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
