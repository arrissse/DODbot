from bot import bot
from telebot import types
from users import create_users_table
from admin import create_admins_table
from keyboard import main_keyboard, admin_keyboard, pro_admin_keyboard, mipt_admin_keyboard, quest_keyboard, quest_started_keyboard, continue_quest_keyboard
from users import add_user, start_quest, is_quest_started, check_points, check_st_points
from admin import get_all_admins, add_admin, get_admin_level
from telebot.types import BotCommand
from merch import create_merch_table
from quiz import create_quiz_table

create_quiz_table()
create_merch_table()
create_admins_table()
create_users_table()

add_admin("@arrisse", 0)
add_admin("@Nikita_Savel", 0)

'''
-----------------------

–°—Ç–∞—Ä—Ç + –æ–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–æ–≤

-----------------------
'''


@bot.message_handler(commands=["start"])
def start(m):
    add_user(m.chat.id, m.from_user.username)
    current_username = '@' + m.from_user.username
    admins = get_all_admins()
    admin_usernames = [admin[0] for admin in admins]
    print(admin_usernames)
    keyboard = main_keyboard()

    print(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {admin_usernames}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_username}")

    bot.set_my_commands([BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])

    if current_username in admin_usernames:
        admin_level = get_admin_level(current_username)
        print(f"–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω—Å—Ç–≤–∞ –¥–ª—è {current_username}: {admin_level}")
        if admin_level == 0:
            keyboard = pro_admin_keyboard()
        elif admin_level == 1:
            keyboard = admin_keyboard()
        elif admin_level == 2:
            keyboard = mipt_admin_keyboard()
        bot.send_message(m.chat.id, "üîë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=keyboard)
    else:
        add_user(m.chat.id, m.from_user.username)
        bot.send_message(m.chat.id, "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=keyboard)
    parts = m.text.split()
    if len(parts) > 1:
        param = parts[1]
    
        try:
            if int(param[-2:]) >= 10:
                name = param[-2:]
            else:
                name = param[-1]
        except ValueError:
            name = param[-1]
    
    photo_url = f"img/{name}.png"
    do_action(m, photo_url)

def do_action(message, photo_url):
    with open(photo_url, "rb") as photo:
        bot.send_photo(message.chat.id, photo, caption="–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ")

'''
-----------------------

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π

-----------------------
'''

@bot.message_handler(func=lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π")
def send_schedule_photo(m):
    photo_url = "img/schedule.png"
    try:
        with open(photo_url, "rb") as photo:
            bot.send_photo(m.chat.id, photo, caption="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π:")
    except Exception as e:
        bot.send_message(m.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

'''
-----------------------

–ö–≤–µ—Å—Ç

-----------------------
'''

@bot.message_handler(func=lambda message: message.text == "üéØ –ö–≤–µ—Å—Ç")
def qwest(message):
    if is_quest_started(message.from_user.username):
        keyboard = quest_started_keyboard()
    else:
        keyboard = quest_keyboard()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")

def start(message):
    start_quest(message.from_user.username)
    markup = continue_quest_keyboard()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
def continue_quest(message):
    markup = continue_quest_keyboard()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back(message):
    bot.send_message(message.chat.id, "–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
                     reply_markup=main_keyboard())


def send_quest_points(message, username, station):
    bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {check_points(username)}", reply_markup=quest_started_keyboard())
    bot.send_message(message.chat.id, f"–ë–∞–ª–ª—ã –∑–∞ –¥–∞–Ω–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é: {check_st_points(username, station)}", reply_markup=quest_started_keyboard())

stations = {
    "—Å—Ç–∞–Ω—Ü–∏—è –§–†–ö–¢": 1,
    "—Å—Ç–∞–Ω—Ü–∏—è –õ–§–ò": 2,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ê–ö–¢": 3,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–≠–§–ú": 4,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ü–ú–ò": 5,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ë–ú–§": 6,
    "—Å—Ç–∞–Ω—Ü–∏—è –ö–ù–¢": 7,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ë–í–¢": 8,
    "—Å—Ç–∞–Ω—Ü–∏—è –í–®–ü–ò": 9,
    "—Å—Ç–∞–Ω—Ü–∏—è –í–®–ú": 10,
    "—Å—Ç–∞–Ω—Ü–∏—è –ü–ò–® –†–ü–ò": 11
}

@bot.message_handler(func=lambda message: message.text in stations)
def handle_station(message):
    station_number = stations[message.text]
    bot.send_message(message.chat.id, message.text, reply_markup=quest_started_keyboard())
    send_quest_points(message, message.from_user.username, station_number)

'''
-----------------------

–ö–∞—Ä—Ç–∞

-----------------------
'''

@bot.message_handler(func=lambda message: message.text == "üó∫ –ö–∞—Ä—Ç–∞")
def send_map_photo(message):
    photo_url = "img/schedule.png"
    try:
        with open(photo_url, "rb") as photo:
            bot.send_photo(message.chat.id, photo, caption="üó∫ –ö–∞—Ä—Ç–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
