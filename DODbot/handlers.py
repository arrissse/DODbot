from bot import bot, dp, router
from aiogram import Bot, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import FSInputFile

from keyboard import main_keyboard, admin_keyboard, pro_admin_keyboard, mipt_admin_keyboard, quest_keyboard, quest_started_keyboard, continue_quest_keyboard, activity_keyboard
from users import add_user, start_quest, is_quest_started, check_points, check_st_points, get_user_by_username, get_all_users
from admin import get_all_admins, add_admin, get_admin_level
from aiogram.types import BotCommand
import logging

stations = {
    "—Å—Ç–∞–Ω—Ü–∏—è –§–†–ö–¢": 1,
    "—Å—Ç–∞–Ω—Ü–∏—è –õ–§–ò": 2,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ê–ö–¢": 3,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–≠–§–ú": 4,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ü–ú–ò": 5,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ë–ú–§": 6,
    "—Å—Ç–∞–Ω—Ü–∏—è –ö–ù–¢": 7,
    "—Å—Ç–∞–Ω—Ü–∏—è –§–ë–í–¢": 8,
    "—Å—Ç–∞–Ω—Ü–∏—è –í–®–ü–ò": 9,
    "—Å—Ç–∞–Ω—Ü–∏—è –í–®–ú": 10,
    "—Å—Ç–∞–Ω—Ü–∏—è –ü–ò–® –†–ü–ò": 11
}

station_place = [
    "–§–∏–∑—Ç–µ—Ö.–¶–∏—Ñ—Ä–∞ 3 —ç—Ç–∞–∂",
    "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–ø—É—Å",
    "–§–∏–∑—Ç–µ—Ö.–ê—Ä–∫—Ç–∏–∫–∞ 2 —ç—Ç–∞–∂",
    "–§–∏–∑—Ç–µ—Ö.–ê—Ä–∫—Ç–∏–∫–∞ 3 —ç—Ç–∞–∂",
    "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å 1 —ç—Ç–∞–∂",
    "–§–∏–∑—Ç–µ—Ö.–¶–∏—Ñ—Ä–∞ 4 —ç—Ç–∞–∂",
    "–§–∏–∑—Ç–µ—Ö.–¶–∏—Ñ—Ä–∞ 2 —ç—Ç–∞–∂",
    "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å 1 —ç—Ç–∞–∂",
    "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å 2 —ç—Ç–∞–∂",
    "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å 1 —ç—Ç–∞–∂",
    "–§–∏–∑—Ç–µ—Ö.–ê—Ä–∫—Ç–∏–∫–∞ 4 —ç—Ç–∞–∂"
]

schools = {
    "–§–†–ö–¢": 1,
    "–õ–§–ò": 2,
    "–§–ê–ö–¢": 3,
    "–§–≠–§–ú": 4,
    "–§–ü–ú–ò": 5,
    "–§–ë–ú–§": 6,
    "–ö–ù–¢": 7,
    "–§–ë–í–¢": 8,
    "–í–®–ü–ò": 9,
    "–í–®–ú": 10,
    "–ü–ò–® –†–ü–ò": 11
}

'''
-----------------------

–°—Ç–∞—Ä—Ç + –æ–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–æ–≤

-----------------------
'''


@router.message(Command("start"))
async def start_handler(m: types.Message):
 try:
    user = m.from_user
    user_list = await get_all_users()
    logging.info(user_list)
    if not user in user_list: 
        await add_user(m.chat.id, user.username)
    current_username = f"@{user.username}"
    admins = await get_all_admins()
    admin_usernames = [admin[0] for admin in admins]
    logging.info(admin_usernames)

    logging.info(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {admin_usernames}")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_username}")

    keyboard = main_keyboard()
    commands = [BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]
    await bot.set_my_commands(commands)

    if current_username in admin_usernames:

        admin_level = await get_admin_level(current_username)
        print(f"–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω—Å—Ç–≤–∞ –¥–ª—è {current_username}: {admin_level}")
        if admin_level == 0:
            keyboard = pro_admin_keyboard()
        elif admin_level == 1:
            keyboard = admin_keyboard()
        elif admin_level == 2:
            keyboard = mipt_admin_keyboard()
        await m.answer("üîë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=keyboard)
    else:
        await add_user(m.chat.id, user.username)
        await m.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    parts = m.text.split()
    if len(parts) > 1:
        param = parts[1]

        try:
            if int(param[-2:]) >= 10:
                name = param[-2:]
            else:
                name = param[-1]
        except ValueError:
            name = param[-1]

        photo_url = f"img/{name}.png"
        await do_action(m, photo_url)
 except Exception as e:
     await m.answer(str(e))


async def do_action(message, photo_url):
    try:
        photo = FSInputFile(photo_url)
        await message.answer_photo(photo, caption="–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

'''
-----------------------

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π

-----------------------
'''


@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π")
async def send_schedule_photo(m):
    try:
       photo = FSInputFile("img/schedule.png")
       await m.answer_photo(photo, caption="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–π:")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


'''
-----------------------

–ö–≤–µ—Å—Ç

-----------------------
'''


@router.message(F.text == "üéØ –ö–≤–µ—Å—Ç")
async def quest_handler(message):
    if await is_quest_started(message.from_user.username):
        keyboard = quest_started_keyboard()
    else:
        keyboard = quest_keyboard()
    await message.answer("*–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞*", reply_markup=keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@router.message(F.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")
async def start_quest_handler(message: types.Message):
    await start_quest(message.from_user.username)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:", reply_markup=continue_quest_keyboard())


@router.message(F.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_quest_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é:", reply_markup=continue_quest_keyboard())


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    await message.answer("–í—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_keyboard())


async def send_quest_points(message: types.Message, username: str, station: str):
    points = await check_points(username)
    st_points = await check_st_points(username, station)
    await message.answer(f"–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {points}\n–ë–∞–ª–ª—ã –∑–∞ —Å—Ç–∞–Ω—Ü–∏—é: {st_points}", reply_markup=quest_started_keyboard())

@router.message(F.text.in_(stations))
async def handle_station(message: types.Message):
    try:
        station_number = stations[message.text]
        st_place = station_place[station_number - 1]
        username = message.from_user.username

        builder = InlineKeyboardBuilder()
        builder.button(text="–ö–æ–¥ –¥–ª—è —É—á–∞—Å—Ç–∏—è",
                       callback_data=f"code:{username}")
        builder.button(
            text="–ë–∞–ª–ª—ã", callback_data=f"points:{username}:{station_number}")

        await message.answer(f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ {message.text}: {st_place}", reply_markup=builder.as_markup())
    except Exception as e:
        await message.answer(str(e))


@router.callback_query(F.data.startswith("code:"))
async def send_code(callback: types.CallbackQuery):
    _, username = callback.data.split(":")
    await callback.message.answer(f"–°–æ–æ–±—â–∏—Ç–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –≤–∞—à –∫–æ–¥: {username}")
    await callback.answer()


@router.callback_query(F.data.startswith("points:"))
async def send_pts(callback: types.CallbackQuery):
    _, username, station_number = callback.data.split(":")
    await send_quest_points(callback.message, username, station_number)
    await callback.answer()


'''
-----------------------

–ö–∞—Ä—Ç–∞

-----------------------
'''


@router.message(F.text == "üó∫ –ö–∞—Ä—Ç–∞")
async def send_map_photo(message: types.Message):
    try:
        photo = FSInputFile("img/map.png")
        await message.answer_photo(photo, caption="üó∫ –ö–∞—Ä—Ç–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


'''
-----------------------

–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤

-----------------------
'''


@router.message(F.text == "üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤")
async def send_stands_photo(message: types.Message):
    try:
        photo = FSInputFile("img/stand.png")
        await message.answer_photo(photo, caption="üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤:")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


'''
-----------------------

–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –§–®

-----------------------
'''

@router.message(F.text == "üß© –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –§–®")
async def school_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –§–®:", reply_markup=activity_keyboard())


@router.message(F.text.in_(schools))
async def handle_activity(message: types.Message):
    try:
        school_number = schools[message.text]
        photo = FSInputFile(f"img/activities/{school_number}.png")
        await message.answer_photo(photo)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
