import sqlite3
import time
from datetime import datetime
from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from users import get_all_users
from admin import get_admin_by_username
import threading
import logging
from database import db_manager

pending_newsletters = {}


def create_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã newsletter —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    try:
        with db_manager.get_connection() as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS newsletter (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message TEXT NOT NULL,
                    send_time TEXT NOT NULL,
                    sent BOOLEAN DEFAULT FALSE  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
                )
            """)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ newsletter —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        raise


def add_newsletter(message, send_time):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        dt = datetime.strptime(send_time, '%Y-%m-%d %H:%M')
        formatted_time = dt.isoformat()

        with db_manager.get_connection() as conn:
            conn.execute(
                "INSERT INTO newsletter (message, send_time) VALUES (?, ?)",
                (message, formatted_time))
            conn.commit()

    except ValueError as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

            
def send_newsletter():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏"""
    while True:
        try:
            current_time = datetime.now().isoformat()

            with db_manager.get_connection() as conn:
                # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                cursor = conn.execute("""
                    SELECT id, message 
                    FROM newsletter 
                    WHERE send_time <= ? AND sent = FALSE
                """, (current_time,))

                newsletters = cursor.fetchall()

                if newsletters:
                    users = get_all_users()
                    for newsletter_id, message in newsletters:
                        send_to_users(message, users)

                        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
                        conn.execute(
                            "UPDATE newsletter SET sent = TRUE WHERE id = ?",
                            (newsletter_id,)
                        )
                        conn.commit()

            time.sleep(60)

        except Exception as e:
            bot.send_message(
                message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            time.sleep(10)


def send_to_users(message, users):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    success = errors = 0
    for user_id, *_ in users:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É (id, ...)
        try:
            bot.send_message(user_id, message)
            success += 1
        except Exception as e:
            bot.send_message(
                message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {str(e)}")
            errors += 1
    bot.send_message(
        message.chat.id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success} | ‚ùå –û—à–∏–±–æ–∫: {errors}")


logger = logging.getLogger(__name__)
pending_newsletters = {}


def start_sending_newsletters():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        thread = threading.Thread(
            target=send_newsletter,
            name="NewsletterThread",
            daemon=True
        )
        thread.start()
        logger.info("–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}")


@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
def ask_newsletter_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    try:
        username = f"@{message.from_user.username}"
        user = get_admin_by_username(username)

        if user and user.level == 0:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤-–º–æ–¥–µ–ª–µ–π
            msg = bot.send_message(
                message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
            bot.register_next_step_handler(msg, ask_send_time)
        else:
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_newsletter_text: {e}")
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


def ask_send_time(message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        chat_id = message.chat.id
        if not message.text:
            raise ValueError("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")

        pending_newsletters[chat_id] = {
            'text': message.text,
            'timestamp': datetime.now()
        }

        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton(
                "üöÄ –°–µ–π—á–∞—Å", callback_data=f"send_now_{chat_id}"),
            InlineKeyboardButton(
                "‚è≥ –ü–æ–∑–∂–µ", callback_data=f"schedule_later_{chat_id}")
        )

        bot.send_message(chat_id, "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:",
                         reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_send_time: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith(("send_now", "schedule_later")))
def handle_send_option(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        chat_id = int(call.data.split("_")[-1])
        data = pending_newsletters.get(chat_id)

        if not data:
            raise ValueError("–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        if call.data.startswith("send_now"):
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            threading.Thread(
                target=send_newsletter_now,
                args=(data['text'],)
            ).start()

            bot.send_message(
                chat_id,
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!\n–°—Ç–µ–∫: {len(data['text'])} —Å–∏–º–≤–æ–ª–æ–≤",
                parse_mode="Markdown"
            )
        else:
            msg = bot.send_message(
                chat_id,
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-03-28 14:30)"
            )
            bot.register_next_step_handler(
                msg, schedule_newsletter, data['text'])

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        del pending_newsletters[chat_id]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_send_option: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


def schedule_newsletter(message, text):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        chat_id = message.chat.id
        send_time = message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        try:
            dt = datetime.strptime(send_time, '%Y-%m-%d %H:%M')
            if dt < datetime.now():
                raise ValueError("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º")

        except ValueError as e:
            error_msg = {
                "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º": "‚è≥ –ù–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è!",
                "unconverted data remains": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"
            }.get(str(e), "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞")

            raise ValueError(error_msg)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with db_manager.get_connection() as conn:
            conn.execute(
                "INSERT INTO newsletter (message, send_time) VALUES (?, ?)",
                (text, dt.isoformat())
            )
            conn.commit()

        bot.send_message(
            chat_id,
            f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {send_time}!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_newsletter: {e}")


def send_newsletter_now(text):
    """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        users = get_all_users()
        total = len(users)
        success = 0

        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        for idx, user in enumerate(users, 1):
            try:
                bot.send_message(user.id, text)
                success += 1

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if idx % 50 == 0:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {idx}/{total} —Å–æ–æ–±—â–µ–Ω–∏–π")

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}/{total}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")


try:
    start_sending_newsletters()
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: {e}")
