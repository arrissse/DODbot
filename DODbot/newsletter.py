from bot import bot, router  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ bot –∏ router —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
from aiogram import F
import logging
from datetime import datetime
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio

from database import db_manager
from users import get_all_users
from admin import get_admin_by_username, get_admin_level

logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
class NewsletterStates(StatesGroup):
    waiting_newsletter_text = State()
    waiting_send_time = State()
    waiting_custom_time = State()


async def init_db():
    try:
        async with db_manager.get_connection() as conn:  # –ó–∞–º–µ–Ω–∞ get_connection() –Ω–∞ get_connection()
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS newsletter (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message TEXT NOT NULL,
                    send_time TEXT NOT NULL
                )
            """)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ newsletter —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        raise


async def add_newsletter(newsletter_text: str, send_time: str):
    try:
        dt = datetime.strptime(send_time, '%Y-%m-%d %H:%M')
        formatted_time = dt.strftime('%Y-%m-%d %H:%M')
        async with db_manager.get_connection() as db:  # –ó–∞–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await db.execute(
                "INSERT INTO newsletter (message, send_time) VALUES (?, ?)",
                (newsletter_text, formatted_time)
            )
            await db.commit()
            logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {formatted_time}")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")


async def newsletter_scheduler():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É."""
    while True:
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M')
        async with db_manager.get_connection() as db:
            async with db.execute(
                "SELECT id, message FROM newsletter WHERE send_time = ?",
                (current_time,)
            ) as cursor:
                newsletters = await cursor.fetchall()

            if newsletters:
                users = await get_all_users()
                for newsletter in newsletters:
                    # newsletter_id - int, message_text - str
                    newsletter_id, message_text = newsletter
                    for user in users:
                        try:
                            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –æ–±—ä–µ–∫—Ç–∞ user –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç id –∏ username
                            await bot.send_message(user.id, message_text)
                        except Exception as e:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}: {e}")

                    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
                    async with db_manager.get_connection() as db:
                        await db.execute(
                            "DELETE FROM newsletter WHERE id = ?",
                            (newsletter_id,)
                        )
                        await db.commit()
                        logger.info(
                            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å id {newsletter_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")

        await asyncio.sleep(60)


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def handle_newsletter(message: Message, state: FSMContext):
    user = await get_admin_by_username(f"@{message.from_user.username}")
    level = await get_admin_level(user)
    if user and level == 0:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(NewsletterStates.waiting_newsletter_text)
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")


@router.message(NewsletterStates.waiting_newsletter_text, F.text)
async def process_newsletter_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üöÄ –°–µ–π—á–∞—Å", callback_data="send_now"),
            InlineKeyboardButton(
                text="‚è≥ –ü–æ–∑–∂–µ", callback_data="schedule_later")
        ]
    ])

    await message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=markup)
    await state.set_state(NewsletterStates.waiting_send_time)


@router.callback_query(NewsletterStates.waiting_send_time, F.data.in_(["send_now", "schedule_later"]))
async def handle_send_option(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    newsletter_text = data.get('text')

    if callback.data == "send_now":
        await send_newsletter(newsletter_text)
        await callback.message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
    else:
        await callback.message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM"
        )
        await state.set_state(NewsletterStates.waiting_custom_time)

    await state.clear()


async def send_newsletter(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        users = await get_all_users()
        success = 0
        errors = 0

        for user in users:
            try:
                await bot.send_message(chat_id=user.id, text=text)
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user.username}: {str(e)}")
                errors += 1

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success} | ‚ùå –û—à–∏–±–æ–∫: {errors}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
        raise


@router.message(NewsletterStates.waiting_custom_time, F.text)
async def process_custom_time(message: Message, state: FSMContext):
    data = await state.get_data()
    newsletter_text = data.get('text')
    send_time = message.text.strip()

    try:
        await add_newsletter(newsletter_text, send_time)
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {send_time}!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()