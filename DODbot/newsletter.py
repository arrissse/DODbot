from bot import bot, router, dp
from aiogram import F
import logging
from datetime import datetime
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import db_manager
from users import get_all_users
from admin import get_admin_by_username
import asyncio

router = Router()
logger = logging.getLogger(__name__)


class NewsletterStates(StatesGroup):
    waiting_text = State()
    waiting_time = State()


async def create_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã newsletter"""
    try:
        async with db_manager.get_async_connection() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS newsletter (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message TEXT NOT NULL,
                    send_time TEXT NOT NULL,
                    sent BOOLEAN DEFAULT FALSE
                )
            """)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ newsletter —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        raise


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def handle_newsletter_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        user = await get_admin_by_username(f"@{message.from_user.username}")
        if user and user.level == 0:
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
            await state.set_state(NewsletterStates.waiting_text)
        else:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_newsletter_start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@router.message(NewsletterStates.waiting_text)
async def process_newsletter_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.update_data(text=message.text)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –°–µ–π—á–∞—Å", callback_data="send_now")],
        [InlineKeyboardButton(text="‚è≥ –ü–æ–∑–∂–µ", callback_data="schedule_later")]
    ])

    await message.answer("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=markup)
    await state.set_state(NewsletterStates.waiting_time)


@router.callback_query(NewsletterStates.waiting_time, F.data.in_(["send_now", "schedule_later"]))
async def handle_send_option(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        data = await state.get_data()
        text = data['text']

        if callback.data == "send_now":
            await start_immediate_newsletter(bot, text)
            await callback.message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
        else:
            await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-03-28 14:30)")
            await state.set_state(NewsletterStates.waiting_time)

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_send_option: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


@router.message(NewsletterStates.waiting_time)
async def process_send_time(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        data = await state.get_data()
        text = data['text']

        try:
            dt = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
            if dt < datetime.now():
                raise ValueError("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º")

            async with db_manager.get_async_connection() as conn:
                await conn.execute(
                    "INSERT INTO newsletter (message, send_time) VALUES (?, ?)",
                    (text, dt.isoformat())
                )
                await conn.commit()

            await message.answer(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {message.text}!")

        except ValueError as e:
            error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è" if "unconverted" in str(
                e) else "‚è≥ –ù–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—à–ª–æ–µ!"
            await message.answer(error_msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_send_time: {e}")
    finally:
        await state.clear()


async def start_immediate_newsletter(bot: Bot, text: str):
    """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    try:
        users = await get_all_users()
        total = len(users)
        success = 0

        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        for user in users:
            try:
                await bot.send_message(user[0], text)
                success += 1
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}/{total}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")


async def newsletter_scheduler(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    while True:
        try:
            now = datetime.now().isoformat()

            async with db_manager.get_async_connection() as conn:
                cursor = await conn.execute("""
                    SELECT id, message 
                    FROM newsletter 
                    WHERE send_time <= ? AND sent = FALSE
                """, (now,))

                newsletters = await cursor.fetchall()

                for newsletter_id, message in newsletters:
                    await start_immediate_newsletter(bot, message)
                    await conn.execute("UPDATE newsletter SET sent = TRUE WHERE id = ?", (newsletter_id,))
                    await conn.commit()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ newsletter_scheduler: {e}")

        await asyncio.sleep(60)
