from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboard import main_keyboard
from users import update_user_points, get_user_by_username, is_quest_started
from users import update_user_queststation
from admin import get_admin_by_username, get_admin_level
from handlers import stations

@bot.message_handler(func=lambda message: message.text == "–ö–≤–µ—Å—Ç. –ü—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª—ã")
def set_points(message):
    user = get_admin_by_username('@' + message.from_user.username)
    level = get_admin_level('@' + message.from_user.username)
    if user and (level == 0 or level == 2):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username):")
        bot.register_next_step_handler(message, process_username)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def process_username(m):
    username = m.text.strip().lstrip('@')

    admin = get_admin_by_username('@' + m.from_user.username)
    admin_num = admin[2]

    user = get_user_by_username(username)

    if user is None:
        bot.send_message(m.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if admin[1] == 0:
        markup = InlineKeyboardMarkup()
        for i in stations:
            markup.add(InlineKeyboardButton(
                f"{stations[i]}", callback_data=f"select_station&{username}&{i}"))

        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏:",
                         reply_markup=markup)
    elif admin[1] == 2:
        if user[admin_num + 2] != 0:
            bot.send_message(
                m.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–∞–ª–ª—ã.")
            return
        process_points_selection(m.chat.id, username, admin[2], user)
    else:
        bot.send_message(
            m.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ —Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª—ã.", reply_markup=main_keyboard())


@bot.callback_query_handler(func=lambda call: call.data.startswith("select_station&"))
def process_station_selection(call):
    bot.answer_callback_query(call.id)

    _, username, admin_num = call.data.split("&")
    admin_num = int(admin_num)

    user = get_user_by_username(username)
    if user is None:
        bot.send_message(call.message.chat.id,
                         f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    if user[admin_num + 2] != 0:
        bot.send_message(call.message.chat.id,
                         f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–∞–ª–ª—ã.")
        return

    bot.send_message(call.message.chat.id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞–Ω—Ü–∏—é {admin_num}")

    process_points_selection(call.message.chat.id, username, admin_num, user)


def process_points_selection(chat_id, username, admin_num, user):
    if not is_quest_started(username):
        bot.send_message(
            chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ.")
        return
    if user[admin_num + 2] != 0:
        bot.send_message(
            chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–∞–ª–ª—ã.")
        return

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            "1Ô∏è‚É£", callback_data=f"points&{username}&{admin_num}&1"),
        InlineKeyboardButton(
            "2Ô∏è‚É£", callback_data=f"points&{username}&{admin_num}&2")
    )
    markup.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_stations&{username}")
    )

    bot.send_message(
        chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_stations&"))
def back_to_stations(call):
    bot.answer_callback_query(call.id)

    _, username = call.data.split("&")
    
    bot.send_message(call.message.chat.id, f"üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è {username}.")
    
    markup = InlineKeyboardMarkup()
    for i in range(1, 12):
        markup.add(InlineKeyboardButton(
            f"–°—Ç–∞–Ω—Ü–∏—è {i}", callback_data=f"select_station&{username}&{i}"))

    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏:",
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("points&"))
def process_points_callback(call):
    bot.answer_callback_query(call.id, f"‚úÖ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!")

    _, username, admin_num, points = call.data.split("&")
    admin_num = int(admin_num)
    points = int(points)

    user = get_user_by_username(username)
    if user is None:
        bot.send_message(call.message.chat.id,
                         f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    update_user_points(username, admin_num, points)
    update_user_queststation(username)
    bot.send_message(call.message.chat.id,
                     f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤!")