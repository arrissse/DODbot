import sqlite3
import threading
import time
import logging
from contextlib import contextmanager

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class DatabaseManager:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super().__new__(cls)
                cls._instance.connection_lock = threading.Lock()
                cls._instance.init_db()
            return cls._instance

    def init_db(self):
        self.conn = sqlite3.connect(
            "base.db",
            check_same_thread=False,
            timeout=30
        )
        self.conn.execute("PRAGMA journal_mode=WAL")
        self.conn.execute("PRAGMA busy_timeout=5000")

    @contextmanager
    def get_connection(self):
        """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        start_time = time.time()
        timeout = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

        while True:
            if self.connection_lock.acquire(blocking=False):
                try:
                    logger.debug("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ë–î –ø–æ–ª—É—á–µ–Ω–∞")
                    yield self.conn
                    self.conn.commit()
                    break
                finally:
                    self.connection_lock.release()
                    logger.debug("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ë–î –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            else:
                if time.time() - start_time > timeout:
                    raise TimeoutError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ë–î")
                logger.debug("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
                time.sleep(0.1)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
db_manager = DatabaseManager()
