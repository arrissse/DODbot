from bot import bot, telebot
from flask import Flask, request, abort
import requests
import os
from requests.exceptions import ConnectionError, Timeout, HTTPError
import time
from telebot.apihelper import ApiTelegramException
import logging
from database import logger, db_manager

def init_database():
 try:
  if not db_manager.is_initialized():
        logger.info("üîë –ù–∞—á–∞–ª–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
        if os.path.exists("database.lock"):
            os.remove("database.lock")
        from newsletter import create_db
        create_db()
        logger.info("üöÄ newsletter")
        from users import create_users_table
        create_users_table()
        logger.info("üöÄ users")
        from admin import create_admins_table
        create_admins_table()
        logger.info("üöÄ admins")
        from admin_handlers import create_price_table
        create_price_table()
        from merch import create_merch_table
        create_merch_table()
        from quiz import create_quiz_table
        create_quiz_table()
        from admin import init_admins
        init_admins()
        logger.info("‚úÖ –ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
 except Exception as e:
        logger.critical(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise SystemExit(1)


def start_background_threads():
    init_database()  # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    try:
        newsletter.start_sending_newsletters()
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: {e}")


import quiz
import set_points
import add_admin
import newsletter
import admin_handlers
import handlers

app = Flask(__name__)
app.logger.setLevel(logging.DEBUG)

@app.route('/test')
def test():
    return "Test page"

@app.route('/your-webhook-path', methods=['POST'])
def webhook():
    print("Webhook received!")
    json_str = request.get_data(as_text=True)
    print(f"Raw data: {json_str}")
    if not json_str:
        return "No data received", 400

    try:
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print(f"Error processing webhook: {e}")
        return "Failed to process update", 500

    return "OK", 200


@app.route("/your-webhook-path", methods=["GET"])
def index():
    return "Flask server is running!", 200

@app.route("/", methods=["GET"])
def home():
    return "Flask server is running!", 200

def set_webhook_with_retry():
    retries = 5
    for _ in range(retries):
        try:
            bot.set_webhook(url="https://fest.mipt.ru/your-webhook-path")
            print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
            time.sleep(10)
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")


if __name__ == '__main__':
    init_database()
    try:
        bot.set_webhook(url="https://fest.mipt.ru/your-webhook-path")
    except ApiTelegramException as e:
        if e.result_json['error_code'] == 429:
            retry_after = e.result_json['parameters']['retry_after']
            print(f"Too many requests. Retrying after {retry_after} seconds...")
            time.sleep(1)
            bot.set_webhook(url="https://fest.mipt.ru/your-webhook-path")

    print(bot.get_webhook_info())
    start_background_threads()
    app.run(host="0.0.0.0", port=10181, debug=True)
