from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot import bot, dp, router
from aiogram import Bot, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
from keyboard import main_keyboard, pro_admin_merch, pro_admin_keyboard, pro_admin_quiz_start
from users import save_users_to_excel, count_active_quests, get_user_by_username
from users import count_finished_quests, check_points, update_merch_points
from admin import save_admins_to_excel, get_admin_by_username, get_admin_level
from merch import give_merch, is_got_merch, got_merch, add_column, save_merch_to_excel
from quiz import update_quiz_time
from database import db_manager
from aiogram.fsm.state import State, StatesGroup
import logging


class Form(StatesGroup):
    waiting_username = State()
    waiting_merch_type = State()
    waiting_new_price = State()
    waiting_merch_name = State()
    waiting_merch_cost = State()
    waiting_delete_merch = State()
    edit_price = State()


'''
-----------------------
admins
-----------------------
'''


@router.message(Command("admins"))
async def send_admins_list(message: Message):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    level = await get_admin_level(f'@{message.from_user.username}') if user else None

    if user and level == 0:
        filename = await save_admins_to_excel(bot=bot)
        print(f"–§–∞–π–ª Excel —Å–æ–∑–¥–∞–Ω: {filename}")

        if filename:
            await message.answer_document(FSInputFile(filename))
        else:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


'''
-----------------------
merch
-----------------------
'''


@router.message(Command("merch"))
async def send_merch_list(message: Message):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    level = await get_admin_level(f'@{message.from_user.username}') if user else None

    if user and level == 0:
        filename = await save_merch_to_excel()
        print(f"–§–∞–π–ª Excel —Å–æ–∑–¥–∞–Ω: {filename}")

        if filename:
            await message.answer_document(FSInputFile(filename))
        else:
            await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


'''
-----------------------
–ú–µ—Ä—á
-----------------------
'''


@router.message(F.text == "–ú–µ—Ä—á")
async def pro_admin_merch_button(message: Message):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    level = await get_admin_level(f'@{message.from_user.username}') if user else None

    try:
        if user and level == 0:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=pro_admin_merch())
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    except Exception as e:
        await message.answer(str(e))


'''
-----------------------
–ù–∞–∑–∞–¥
-----------------------
'''


@router.message(F.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
async def pro_admin_merch_back(message: Message):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    level = await get_admin_level(f'@{message.from_user.username}') if user else None
    try:
        if user and level == 0:
            await message.answer("üîë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=pro_admin_keyboard())
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    except Exception as e:
        await message.answer(str(e))


'''
-----------------------
–ù–∞—á–∞—Ç—å –∫–≤–∏–∑
-----------------------
'''


@router.message(F.text == "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
async def pro_admin_quiz_button(message: Message):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    level = await get_admin_level(f'@{message.from_user.username}') if user else None

    try:
        if user and level == 0:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑:", reply_markup=pro_admin_quiz_start())
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    except Exception as e:
        await message.answer(str(e))


quiz_list = {
    "–ö–≤–∏–∑ 1": 1,
    "–ö–≤–∏–∑ 2": 2,
    "–ö–≤–∏–∑ 3": 3,
    "–ö–≤–∏–∑ 4": 4,
    "–ö–≤–∏–∑ 5": 5,
}


@router.message(F.text.in_(quiz_list))
async def handle_quiz_start(message: Message):
    quiz_number = quiz_list[message.text]
    markup = InlineKeyboardBuilder()
    markup.button(InlineKeyboardButton("–î–∞", callback_data=f'start_quiz:{quiz_number}'),
                  InlineKeyboardButton("–ù–µ—Ç", callback_data='not_start_quiz:'))
    await message.answer(f"–ù–∞—á–∞—Ç—å {message.text}?", reply_markup=markup.as_markup())


@router.callback_query(F.data.startswith("start_quiz:"))
async def start_quiz(call: CallbackQuery):
    try:
        await call.answer()
        _, quiz_id = call.data.split(":")
        quiz_id = int(quiz_id)
        async with db_manager.get_connection() as conn:
            quiz_info = await conn.fetchrow(
                "SELECT * FROM quiz_schedule WHERE id = ?",
                (quiz_id, )
            )
        if not quiz_info:
            return await call.message.answer("–û—à–∏–±–∫–∞: –∫–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        quiz_name = quiz_info[0]
        current_time = datetime.now().strftime("%H:%M")
        await update_quiz_time(quiz_id, current_time)
        markup = InlineKeyboardBuilder()
        markup.button(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                                           callback_data=f'next_question:{quiz_id}:1'))
        await call.message.answer(f"‚úÖ {quiz_name} –Ω–∞—á–∞—Ç!", reply_markup=markup.as_markup())
    except Exception as e:
        await call.message.answer(f"‚ùå {str(e)}")


@router.callback_query(F.data.startswith("next_question:"))
async def send_next_question(call: CallbackQuery):
    return


@router.callback_query(F.data.startswith("answer:"))
async def check_answer(call: CallbackQuery):
    await call.answer()
    _, question_id, answer_id = call.data.split(":")
    question_id, answer_id = int(question_id), int(answer_id)
    async with db_manager.get_connection() as conn:
        result = await conn.fetchrow(
            "SELECT is_correct FROM answers WHERE id = ?",
            (answer_id, )
        )
    if result and result['is_correct']:
        await call.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await call.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")


@router.callback_query(F.data.startswith("not_start_quiz"))
async def cancel_quiz(call: CallbackQuery):
    await call.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


'''
-----------------------
–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
-----------------------
'''


@router.message(F.text == "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def send_users_list(message: Message):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    if user:
        filename = await save_users_to_excel()
        if filename:
            await message.answer_document(FSInputFile(filename))
        else:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


'''
-----------------------
–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–Ω—é
-----------------------
'''


@router.message(F.text == "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–Ω—é")
async def chage_menu(m: Message):
    await m.answer("–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup=main_keyboard())


'''
-----------------------
–ö–≤–µ—Å—Ç. –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
-----------------------
'''


@router.message(F.text == "–ö–≤–µ—Å—Ç. –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: Message):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    if user:
        active_users = await count_active_quests()
        finished_users = await count_finished_quests()
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—á–∞–≤—à–∏—Ö –∫–≤–µ—Å—Ç: {active_users}\n"
                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –∫–≤–µ—Å—Ç: {finished_users}\n")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


'''
-----------------------
–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä—á–∞
-----------------------
'''


async def create_price_table():
    async with db_manager.get_connection() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS merch_prices (
                merch_type TEXT PRIMARY KEY,
                price INTEGER DEFAULT 0
            )
        """)
        await conn.execute("""
            INSERT INTO merch_prices (merch_type, price) VALUES 
                ('–†–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Ñ—É—Ç–±–æ–ª–∫—É', 7),
                ('–†–∞—Å–∫—Ä–∞—Å–∏—Ç—å —à–æ–ø–ø–µ—Ä', 5),
                ('–§—É—Ç–±–æ–ª–∫–∞', 8),
                ('–ë–ª–æ–∫–Ω–æ—Ç', 2),
                ('–ü–ë', 15)
            ON CONFLICT (merch_type) DO NOTHING
        """)
        await conn.commit()


async def get_merch_types():
    async with db_manager.get_connection() as conn:
        cursor = await conn.execute("SELECT merch_type FROM merch_prices")
        result = await cursor.fetchall()
        return [row['merch_type'] for row in result]


async def get_merch_price(merch_type: str):
    async with db_manager.get_connection() as conn:
       async with conn.execute(
           "SELECT price FROM merch_prices WHERE merch_type = ?",
           (merch_type,)
       ) as cursor:
           result = await cursor.fetchone()
           return result[0] if result else None


async def update_merch_price(merch_type, new_price):
    async with db_manager.get_connection() as conn:
        await conn.execute("""
            INSERT INTO merch_prices (merch_type, price) 
            VALUES (?, ?)
            ON CONFLICT (merch_type) DO UPDATE SET price = ?
        """, (merch_type, new_price, new_price))
        await conn.commit()


@router.message(F.text == "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä—á–∞")
async def merch_prices_menu(message: Message):
    async with db_manager.get_connection() as conn:
        cursor = await conn.execute("SELECT merch_type FROM merch_prices")
        result = await cursor.fetchall()
        merch_types = [row[0] for row in result]

        markup = InlineKeyboardBuilder()
        for merch in merch_types:
            markup.row(InlineKeyboardButton(
                text=merch,
                callback_data=f"edit_price:{merch}"
            ))

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
            reply_markup=markup.as_markup()
        )


@router.callback_query(F.data.startswith("edit_price"))
async def edit_price_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    merch_type = call.data.split(":")[1]
    await state.update_data(merch_type=merch_type)
    await state.set_state(Form.edit_price)
    current_price = await get_merch_price(merch_type)
    await call.message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {merch_type}: {current_price}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:")


@router.message(Form.edit_price)
async def process_new_price(message: Message, state: FSMContext):
    data = await state.get_data()
    merch_type = data['merch_type']
    try:
        new_price = int(message.text)
        await update_merch_price(merch_type, new_price)
        await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å {merch_type} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price}!")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.clear()


'''
-----------------------
–í—ã–¥–∞—Ç—å –º–µ—Ä—á
-----------------------
'''


@router.message(F.text == "–í—ã–¥–∞—Ç—å –º–µ—Ä—á")
async def give_merch_to_user(message: Message, state: FSMContext):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    if user and (user[1] == 0 or user[1] == 1):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username):")
        await state.set_state(Form.waiting_username)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(Form.waiting_username)
async def process_fusername(m: Message, state: FSMContext):
    try:
        if m.text[0] != '@':
            await m.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        username = m.text.lstrip('@')
        if await is_got_merch(username):
            await m.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ –ø–æ–ª—É—á–∏–ª –º–µ—Ä—á.")
            return

        if not await get_user_by_username(username):
            await m.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ—Ç –≤ –±–∞–∑–µ.")
            return

        await state.update_data(username=username)
        markup = InlineKeyboardBuilder()
        merch_types = await get_merch_types()

        for merch in merch_types:
            price = await get_merch_price(merch)
            if (
                await check_points(username.strip('@')) >= price
                and not await got_merch(username, merch)
            ):
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                markup.add(InlineKeyboardButton(
                    text=f"{merch}: {price}",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º text=
                    # callback_data=
                    callback_data=f'give_merch:{price}:{merch}:{username}'
                ))

        if markup.as_markup().inline_keyboard:
            await m.answer(
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ {username}: {await check_points(username)}. "
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä—á:",
                reply_markup=markup.as_markup()
            )
        else:
            await m.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤: {await check_points(username.strip('@'))}")

        await state.clear()

    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()



@router.callback_query(F.data.startswith("give_merch"))
async def process_merch_callback(call: CallbackQuery):
    _, merch_price, merch_type, username = call.data.split(":")
    markup = InlineKeyboardBuilder()
    markup.button(
        InlineKeyboardButton(
            '–î–∞', callback_data=f'yes:{merch_price}:{merch_type}:{username}'),
        InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
    )
    await call.message.answer(f"–í—ã–¥–∞—Ç—å {username} {merch_type}?", reply_markup=markup.as_markup())


@router.callback_query(F.data.startswith("yes"))
async def process_merch_call_yes(call: CallbackQuery):
    _, merch_price, merch_type, username = call.data.split(":")
    await give_merch(username, merch_type)
    await update_merch_points(username, merch_price)
    print(int(await get_merch_price(merch_type)))
    await call.answer("‚úÖ –ú–µ—Ä—á –∑–∞ –∫–≤–µ—Å—Ç –≤—ã–¥–∞–Ω!")
    await call.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –≤—ã–¥–∞–Ω –º–µ—Ä—á –∑–∞ –∫–≤–µ—Å—Ç!")


@router.callback_query(F.data.startswith("no"))
async def process_merch_call_no(call: CallbackQuery):
    await call.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


'''
-----------------------
–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞
-----------------------
'''


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞")
async def add_merch_type(message: Message, state: FSMContext):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    if user and user[1] == 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ä—á–∞:")
        await state.set_state(Form.waiting_merch_name)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(Form.waiting_merch_name)
async def process_type(message: Message, state: FSMContext):
    await state.update_data(type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ä—á–∞:")
    await state.set_state(Form.waiting_merch_cost)


@router.message(Form.waiting_merch_cost)
async def process_type_cost(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        merch_type = data['type']
        cost = int(message.text)
    except ValueError:
        await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return
    async with db_manager.get_connection() as conn:
        await conn.execute("""
            INSERT OR IGNORE INTO merch_prices (merch_type, price) VALUES (?, ?)
        """, (merch_type, cost))
    try:
        await add_column(merch_type)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")
        await state.clear()
        return
    await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{merch_type}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Ü–µ–Ω–æ–π {cost} –±–∞–ª–ª–æ–≤.")
    await state.clear()


'''
-----------------------
–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞
-----------------------
'''


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞")
async def remove_merch_type(message: Message, state: FSMContext):
    user = await get_admin_by_username(f'@{message.from_user.username}')
    if user and user[1] == 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ä—á–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å:")
        await state.set_state(Form.waiting_delete_merch)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(Form.waiting_delete_merch)
async def process_r_type(message: Message, state: FSMContext):
    merch_type = message.text.strip()
    try:
        async with db_manager.get_connection() as conn:
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM merch_prices WHERE merch_type = ?",
                (merch_type,)
            )
            result = await cursor.fetchone()
            count = result[0] if result else 0
            if count == 0:
                await message.answer(f"‚ùå –ü–æ–∑–∏—Ü–∏—è '{merch_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.clear()
                return
            await conn.execute(
                "DELETE FROM merch_prices WHERE merch_type = ?",
                (merch_type,)
            )
            # –í–ù–ò–ú–ê–ù–ò–ï: –í—ã–∑–æ–≤ DROP COLUMN –≤ SQLite –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
            await conn.execute(
                f"ALTER TABLE merch DROP COLUMN {merch_type}"
            )
            await conn.commit()
            await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{merch_type}' —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    finally:
        await state.clear()
