from bot import bot
import sqlite3
from telebot import types
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboard import main_keyboard, pro_admin_merch, pro_admin_keyboard, pro_admin_quiz_start
from users import save_users_to_excel, count_active_quests, get_user_by_username
from users import count_finished_quests
from users import check_points, update_merch_points
from admin import save_admins_to_excel, get_admin_by_username, get_admin_level
from merch import give_merch, is_got_merch, got_merch, add_column, save_merch_to_excel
from quiz import update_quiz_time
from database import db_lock, db_operation


'''
-----------------------

admins

-----------------------
'''


@bot.message_handler(commands=["admins"])
def send_admins_list(message):

    user = get_admin_by_username('@' + message.from_user.username)
    level = get_admin_level('@' + message.from_user.username)

    if user and level == 0:
        filename = save_admins_to_excel()
        print(f"–§–∞–π–ª Excel —Å–æ–∑–¥–∞–Ω: {filename}")

        if filename:
            with open(filename, "rb") as file:
                bot.send_document(message.chat.id, file)
        else:
            bot.send_message(
                message.chat.id, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        bot.send_message(
            message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


'''
-----------------------

merch

-----------------------
'''


@bot.message_handler(commands=["merch"])
def send_admins_list(message):

    user = get_admin_by_username('@' + message.from_user.username)
    level = get_admin_level('@' + message.from_user.username)

    if user and level == 0:
        filename = save_merch_to_excel()
        print(f"–§–∞–π–ª Excel —Å–æ–∑–¥–∞–Ω: {filename}")

        if filename:
            with open(filename, "rb") as file:
                bot.send_document(message.chat.id, file)
        else:
            bot.send_message(message.chat.id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
    else:
        bot.send_message(
            message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


'''
-----------------------

–ú–µ—Ä—á

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–ú–µ—Ä—á")
def pro_admin_merch_button(message):
    user = get_admin_by_username('@' + message.from_user.username)
    level = get_admin_level('@' + message.from_user.username)

    try:
        if user and level == 0:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=pro_admin_merch())
        else:
            bot.send_message(
                message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, e)


'''
-----------------------

–ù–∞–∑–∞–¥

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
def pro_admin_merch_back(message):
    user = get_admin_by_username('@' + message.from_user.username)
    level = get_admin_level('@' + message.from_user.username)
    try:
        if user and level == 0:
            bot.send_message(message.chat.id, "üîë –ê–¥–º–∏–Ω-–º–µ–Ω—é:",
                             reply_markup=pro_admin_keyboard())
        else:
            bot.send_message(
                message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, e)


'''
-----------------------

–ù–∞—á–∞—Ç—å –∫–≤–∏–∑

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑")
def pro_admin_quiz_button(message):
    user = get_admin_by_username('@' + message.from_user.username)
    level = get_admin_level('@' + message.from_user.username)

    try:
        if user and level == 0:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑:",
                             reply_markup=pro_admin_quiz_start())
        else:
            bot.send_message(
                message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, e)


quiz_list = {
    "–ö–≤–∏–∑ 1": 1,
    "–ö–≤–∏–∑ 2": 2,
    "–ö–≤–∏–∑ 3": 3,
    "–ö–≤–∏–∑ 4": 4,
    "–ö–≤–∏–∑ 5": 5,
}


@bot.message_handler(func=lambda message: message.text in quiz_list)
def handle_quiz_start(message):
    quiz_number = quiz_list[message.text]
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–∞", callback_data=f'start_quiz:{quiz_number}'), InlineKeyboardButton(
        "–ù–µ—Ç", callback_data=f'not_start_quiz:'), )
    bot.send_message(
        message.chat.id, f"–ù–∞—á–∞—Ç—å {message.text}?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("start_quiz:"))
def start_quiz(call):
    bot.answer_callback_query(call.id)
    _, quiz_id = call.data.split(":")
    quiz_id = int(quiz_id)
    conn = db_operation()
    cur = conn.cursor()

    cur.execute("SELECT quiz_name FROM quiz_schedule WHERE id = ?", (quiz_id,))
    quiz_info = cur.fetchone()
    

    if not quiz_info:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–≤–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    quiz_name = quiz_info[0]
    current_time = datetime.now().strftime("%H:%M")
    update_quiz_time(quiz_id, current_time)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å",
               callback_data=f'next_question:{quiz_id}:1'))
    bot.send_message(call.message.chat.id,
                     f"‚úÖ {quiz_name} –Ω–∞—á–∞—Ç!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("next_question:"))
def send_next_question(call):
    bot.answer_callback_query(call.id)
    _, quiz_id, question_number = call.data.split(":")
    quiz_id, question_number = int(quiz_id), int(question_number)

    conn = db_operation()
    cur = conn.cursor()

    cur.execute("""
        SELECT id, text FROM questions 
        WHERE quiz_id = ? ORDER BY id ASC LIMIT 1 OFFSET ?
    """, (quiz_id, question_number - 1))
    question = cur.fetchone()

    if not question:
        bot.send_message(call.message.chat.id, "–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        
        return

    question_id, question_text = question

    cur.execute(
        "SELECT id, text FROM answers WHERE question_id = ?", (question_id,))
    answers = cur.fetchall()

    markup = InlineKeyboardMarkup()
    for answer_id, answer_text in answers:
        markup.add(InlineKeyboardButton(
            answer_text, callback_data=f'answer:{question_id}:{answer_id}'))

    bot.send_message(call.message.chat.id, question_text, reply_markup=markup)

    markup_next = InlineKeyboardMarkup()
    markup_next.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
                    callback_data=f'next_question:{quiz_id}:{question_number + 1}'))
    bot.send_message(call.message.chat.id,
                     "–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É?", reply_markup=markup_next)

    


@bot.callback_query_handler(func=lambda call: call.data.startswith("answer:"))
def check_answer(call):
    bot.answer_callback_query(call.id)
    _, question_id, answer_id = call.data.split(":")
    question_id, answer_id = int(question_id), int(answer_id)

    conn = db_operation()
    cur = conn.cursor()

    cur.execute("SELECT is_correct FROM answers WHERE id = ?", (answer_id,))
    result = cur.fetchone()

    if result and result[0] == 1:
        bot.send_message(call.message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")

    


@bot.callback_query_handler(func=lambda call: call.data == "not_start_quiz")
def cancel_quiz(call):
    bot.answer_callback_query(call.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    bot.send_message(call.message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


'''
-----------------------

–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def send_users_list(message):
    user = get_admin_by_username('@' + message.from_user.username)
    if user:
        filename = save_users_to_excel()

        if filename:
            with open(filename, "rb") as file:
                bot.send_document(message.chat.id, file)
    else:
        bot.send_message(message.chat.id, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


'''
-----------------------

–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–Ω—é

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–Ω—é")
def chage_menu(m):
    bot.send_message(m.chat.id, "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ /start",
                     reply_markup=main_keyboard())


'''
-----------------------

–ö–≤–µ—Å—Ç. –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–ö–≤–µ—Å—Ç. –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def statistics(message):
    user = get_admin_by_username('@' + message.from_user.username)
    if user:
        active_users = count_active_quests()
        finished_users = count_finished_quests()
        bot.send_message(
            message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—á–∞–≤—à–∏—Ö –∫–≤–µ—Å—Ç: {active_users}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –∫–≤–µ—Å—Ç: {finished_users}\n")
    else:
        bot.send_message(
            message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


'''
-----------------------

–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä—á–∞

-----------------------
'''


def create_price_table():
    with db_lock:
        with db_operation() as conn:
            cursor = conn.cursor()
            cursor.execute("""
    CREATE TABLE IF NOT EXISTS merch_prices (
        merch_type TEXT PRIMARY KEY,
        price INTEGER DEFAULT 0
    )
    """)
            cursor.execute("""
    INSERT OR IGNORE INTO merch_prices (merch_type, price) VALUES 
        ("–†–∞—Å–∫—Ä–∞—Å–∏—Ç—å —Ñ—É—Ç–±–æ–ª–∫—É", 7),
        ("–†–∞—Å–∫—Ä–∞—Å–∏—Ç—å —à–æ–ø–ø–µ—Ä", 5),
        ("–§—É—Ç–±–æ–ª–∫–∞", 8),
        ("–ë–ª–æ–∫–Ω–æ—Ç", 2),
        ("–ü–ë", 15);
    """)

            conn.commit()
            


def get_merch_types():
    with db_lock:
        with db_operation() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT merch_type FROM merch_prices")
            types = [row[0] for row in cursor.fetchall()]
            
            return types


def get_merch_price(merch_type):
    with db_lock:
        with db_operation() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT price FROM merch_prices WHERE merch_type = ?", (merch_type,))
            result = cursor.fetchone()
            
            return result[0] if result else 0


def update_merch_price(merch_type, new_price):
    with db_lock:
        with db_operation() as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO merch_prices (merch_type, price) VALUES (?, ?) ON CONFLICT(merch_type) DO UPDATE SET price = ?",
                           (merch_type, new_price, new_price))
            conn.commit()
            


@bot.message_handler(func=lambda message: message.text == "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä—á–∞")
def merch_prices_menu(message):
    with db_lock:
        with db_operation() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT merch_type FROM merch_prices")
            merch_types = [row[0] for row in cursor.fetchall()]
            

            markup = types.InlineKeyboardMarkup()
            for merch in merch_types:
                markup.add(types.InlineKeyboardButton(
                    merch, callback_data=f"edit_price:{merch}"))

            bot.send_message(
                message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_price"))
def edit_price(call):
    merch_type = call.data.split(":")[1]
    current_price = get_merch_price(merch_type)
    bot.send_message(call.message.chat.id,
                     f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {merch_type}: {current_price}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:")
    bot.register_next_step_handler(
        call.message, lambda msg: process_new_price(msg, merch_type))


def process_new_price(message, merch_type):
    try:
        new_price = int(message.text)
        update_merch_price(merch_type, new_price)
        bot.send_message(
            message.chat.id, f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å {merch_type} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_price}!")
    except ValueError:
        bot.send_message(
            message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


'''
-----------------------

–í—ã–¥–∞—Ç—å –º–µ—Ä—á

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–í—ã–¥–∞—Ç—å –º–µ—Ä—á")
def give_merch_to_user(message):
    user = get_admin_by_username('@' + message.from_user.username)
    if user and (user[1] == 0 or user[1] == 1):
        bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username):")
        bot.register_next_step_handler(message, process_fusername)
    else:
        bot.send_message(
            message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def process_fusername(m):
    try:
        if m.text[0] != '@':
            bot.send_message(
                m.chat.id, f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        username = m.text.lstrip('@')
        if is_got_merch(username):
            bot.send_message(
                m.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ –ø–æ–ª—É—á–∏–ª –º–µ—Ä—á.")
            return
        if not get_user_by_username(username):
            bot.send_message(
                m.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–µ—Ç –≤ –±–∞–∑–µ.")
            return

        markup = InlineKeyboardMarkup()

        merch_types = get_merch_types()
        for merch in merch_types:
            if check_points(username) >= get_merch_price(merch) and not got_merch(username, merch.lower()):
                markup.add(InlineKeyboardButton(
                    merch, callback_data=f'give_merch:{get_merch_price(merch)}:{merch.lower()}:{username}'))

        if markup.keyboard:
            bot.send_message(
                m.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}:", reply_markup=markup)
        else:
            bot.send_message(
                m.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ä—á.")
    except Exception as e:
        bot.send_message(m.chat.id, e)


@bot.callback_query_handler(func=lambda call: call.data.startswith("give_merch"))
def process_merch_callback(call):
    _, merch_price, merch_type, username = call.data.split(":")

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(
            '–î–∞', callback_data=f'yes:{merch_price}:{merch_type}:{username}'),
        InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
    )
    bot.send_message(call.message.chat.id,
                     f"–í—ã–¥–∞—Ç—å {username} {merch_type}?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("yes"))
def process_merch_call_yes(call):
    _, merch_price, merch_type, username = call.data.split(":")
    give_merch(username, merch_type)
    update_merch_points(username, merch_price)
    print(int(get_merch_price(merch_type)))
    bot.answer_callback_query(call.id, "‚úÖ –ú–µ—Ä—á –∑–∞ –∫–≤–µ—Å—Ç –≤—ã–¥–∞–Ω!")
    bot.send_message(call.message.chat.id,
                     f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} –≤—ã–¥–∞–Ω –º–µ—Ä—á –∑–∞ –∫–≤–µ—Å—Ç!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("no"))
def process_merch_call_no(call):
    bot.answer_callback_query(call.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    bot.send_message(call.message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


'''
-----------------------

–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞")
def add_merch_type(message):
    user = get_admin_by_username('@' + message.from_user.username)
    if user and user[1] == 0:
        bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ä—á–∞: ")
        bot.register_next_step_handler(message, process_type)
    else:
        bot.send_message(
            message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def process_type(message):
    type = message.text
    bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ä—á–∞: ")
    bot.register_next_step_handler(
        message, lambda msg: process_type_cost(msg, type))


def process_type_cost(message, type):
    try:
        cost = int(message.text)
    except ValueError:
        bot.send_message(
            message.chat.id, "‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    with db_lock:
        with db_operation() as conn:
            cursor = conn.cursor()

            cursor.execute("""
                INSERT OR IGNORE INTO merch_prices (merch_type, price) VALUES (?, ?)
            """, (type, cost))

            conn.commit()
            

    try:
        add_column(type)
    except Exception as e:
        bot.send_message(
            message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")

    bot.send_message(
        message.chat.id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{type}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Ü–µ–Ω–æ–π {cost} –±–∞–ª–ª–æ–≤.")


'''
-----------------------

–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞

-----------------------
'''


@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—á–∞")
def remove_merch_type(message):
    user = get_admin_by_username('@' + message.from_user.username)
    if user and user[1] == 0:
        bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ä—á–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å: ")
        bot.register_next_step_handler(message, process_r_type)
    else:
        bot.send_message(
            message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


def process_r_type(message):
    merch_type = message.text.strip()

    with db_lock:
        with db_operation() as conn:
            cursor = conn.cursor()

            cursor.execute(
                "SELECT COUNT(*) FROM merch_prices WHERE merch_type = ?", (merch_type,))
            if cursor.fetchone()[0] == 0:
                bot.send_message(
                    message.chat.id, f"‚ùå –ü–æ–∑–∏—Ü–∏—è '{merch_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                
                return

            cursor.execute(
                "DELETE FROM merch_prices WHERE merch_type = ?", (merch_type,))

            cursor.execute("PRAGMA table_info(merch);")
            columns = [row[1] for row in cursor.fetchall()]

            if merch_type in columns:
                new_columns = [col for col in columns if col != merch_type]
                if not new_columns:
                    bot.send_message(
                        message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É.")
                    
                    return

                columns_str = ", ".join(f'"{col}"' for col in new_columns)

                cursor.execute(
                    f"CREATE TABLE merch_temp AS SELECT {columns_str} FROM merch;")
                cursor.execute("DROP TABLE merch;")
                cursor.execute("ALTER TABLE merch_temp RENAME TO merch;")

            conn.commit()
            

    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{merch_type}' —É–¥–∞–ª–µ–Ω–∞.")
